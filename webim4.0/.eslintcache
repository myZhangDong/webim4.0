[{"/Users/lr/Documents/work/webim4.0/webim4.0/src/index.js":"1","/Users/lr/Documents/work/webim4.0/webim4.0/src/App.js":"2","/Users/lr/Documents/work/webim4.0/webim4.0/src/reportWebVitals.js":"3","/Users/lr/Documents/work/webim4.0/webim4.0/src/i18n/index.js":"4","/Users/lr/Documents/work/webim4.0/webim4.0/src/redux/index.js":"5","/Users/lr/Documents/work/webim4.0/webim4.0/src/redux/login.js":"6","/Users/lr/Documents/work/webim4.0/webim4.0/src/common/routes.js":"7","/Users/lr/Documents/work/webim4.0/webim4.0/src/redux/common.js":"8","/Users/lr/Documents/work/webim4.0/webim4.0/src/redux/roster.js":"9","/Users/lr/Documents/work/webim4.0/webim4.0/src/redux/session.js":"10","/Users/lr/Documents/work/webim4.0/webim4.0/src/redux/groupMember.js":"11","/Users/lr/Documents/work/webim4.0/webim4.0/src/redux/chatRoom.js":"12","/Users/lr/Documents/work/webim4.0/webim4.0/src/redux/group.js":"13","/Users/lr/Documents/work/webim4.0/webim4.0/src/redux/webim.js":"14","/Users/lr/Documents/work/webim4.0/webim4.0/src/redux/message.js":"15","/Users/lr/Documents/work/webim4.0/webim4.0/src/components/common/Loading.js":"16","/Users/lr/Documents/work/webim4.0/webim4.0/src/utils/index.js":"17","/Users/lr/Documents/work/webim4.0/webim4.0/src/pages/main/index.js":"18","/Users/lr/Documents/work/webim4.0/webim4.0/src/common/WebIM.js":"19","/Users/lr/Documents/work/webim4.0/webim4.0/src/utils/AppDB.js":"20","/Users/lr/Documents/work/webim4.0/webim4.0/src/theme/index.jsx":"21","/Users/lr/Documents/work/webim4.0/webim4.0/src/pages/register/index.jsx":"22","/Users/lr/Documents/work/webim4.0/webim4.0/src/pages/login/index.jsx":"23","/Users/lr/Documents/work/webim4.0/webim4.0/src/common/WebIMConfig.js":"24","/Users/lr/Documents/work/webim4.0/webim4.0/src/components/chat/index.js":"25","/Users/lr/Documents/work/webim4.0/webim4.0/src/theme/deepSea.js":"26","/Users/lr/Documents/work/webim4.0/webim4.0/src/pages/login/style.js":"27","/Users/lr/Documents/work/webim4.0/webim4.0/src/components/common/Alert.js":"28","/Users/lr/Documents/work/webim4.0/webim4.0/src/components/session/sessionList.jsx":"29","/Users/lr/Documents/work/webim4.0/webim4.0/src/components/appbar/appBar.jsx":"30","/Users/lr/Documents/work/webim4.0/webim4.0/src/components/appbar/addGroup/addGroup.js":"31","/Users/lr/Documents/work/webim4.0/webim4.0/src/components/appbar/addressBook/addressBook.js":"32","/Users/lr/Documents/work/webim4.0/webim4.0/src/components/appbar/addFriend/addFriend.js":"33","/Users/lr/Documents/work/webim4.0/webim4.0/src/components/common/dialog.js":"34","/Users/lr/Documents/work/webim4.0/webim4.0/src/components/appbar/addressBook/chatRoom.js":"35","/Users/lr/Documents/work/webim4.0/webim4.0/src/components/appbar/addressBook/groupList.js":"36","/Users/lr/Documents/work/webim4.0/webim4.0/src/components/chat/messageList.js":"37","/Users/lr/Documents/work/webim4.0/webim4.0/src/components/chat/sendBox.jsx":"38","/Users/lr/Documents/work/webim4.0/webim4.0/src/components/chat/messages/imageMessage.js":"39","/Users/lr/Documents/work/webim4.0/webim4.0/src/components/chat/messages/textMessage.js":"40","/Users/lr/Documents/work/webim4.0/webim4.0/src/components/chat/messages/fileMessage.js":"41","/Users/lr/Documents/work/webim4.0/webim4.0/src/components/chat/messages/audioMessage.js":"42","/Users/lr/Documents/work/webim4.0/webim4.0/src/components/chat/messages/retractedMessage.js":"43","/Users/lr/Documents/work/webim4.0/webim4.0/src/components/chat/toolbars/emoji.js":"44","/Users/lr/Documents/work/webim4.0/webim4.0/src/common/emoji.js":"45","/Users/lr/Documents/work/webim4.0/webim4.0/src/components/appbar/userInfo/index.jsx":"46","/Users/lr/Documents/work/webim4.0/webim4.0/src/components/appbar/userSetting/index.jsx":"47"},{"size":845,"mtime":1622862957096,"results":"48","hashOfConfig":"49"},{"size":1664,"mtime":1622862957078,"results":"50","hashOfConfig":"49"},{"size":362,"mtime":1622862957100,"results":"51","hashOfConfig":"49"},{"size":740,"mtime":1622862957095,"results":"52","hashOfConfig":"49"},{"size":1453,"mtime":1622862957098,"results":"53","hashOfConfig":"49"},{"size":2104,"mtime":1622862957098,"results":"54","hashOfConfig":"49"},{"size":690,"mtime":1622862957090,"results":"55","hashOfConfig":"49"},{"size":946,"mtime":1622862957098,"results":"56","hashOfConfig":"49"},{"size":2332,"mtime":1622862957099,"results":"57","hashOfConfig":"49"},{"size":1862,"mtime":1622862957099,"results":"58","hashOfConfig":"49"},{"size":2005,"mtime":1622862957098,"results":"59","hashOfConfig":"49"},{"size":1874,"mtime":1622862957097,"results":"60","hashOfConfig":"49"},{"size":3350,"mtime":1622862957098,"results":"61","hashOfConfig":"49"},{"size":1615,"mtime":1622862957099,"results":"62","hashOfConfig":"49"},{"size":8923,"mtime":1622862957099,"results":"63","hashOfConfig":"49"},{"size":772,"mtime":1622862957094,"results":"64","hashOfConfig":"49"},{"size":4154,"mtime":1622862957100,"results":"65","hashOfConfig":"49"},{"size":4080,"mtime":1622862957097,"results":"66","hashOfConfig":"49"},{"size":1168,"mtime":1622862957089,"results":"67","hashOfConfig":"49"},{"size":5642,"mtime":1622862957100,"results":"68","hashOfConfig":"49"},{"size":404,"mtime":1622862957100,"results":"69","hashOfConfig":"49"},{"size":6103,"mtime":1622862957097,"results":"70","hashOfConfig":"49"},{"size":6103,"mtime":1622862957096,"results":"71","hashOfConfig":"49"},{"size":2520,"mtime":1622862957089,"results":"72","hashOfConfig":"49"},{"size":774,"mtime":1622862957092,"results":"73","hashOfConfig":"49"},{"size":544,"mtime":1622862957100,"results":"74","hashOfConfig":"49"},{"size":1518,"mtime":1622862957096,"results":"75","hashOfConfig":"49"},{"size":1673,"mtime":1622862957094,"results":"76","hashOfConfig":"49"},{"size":5760,"mtime":1622862957095,"results":"77","hashOfConfig":"49"},{"size":11392,"mtime":1623069921020,"results":"78","hashOfConfig":"49"},{"size":2631,"mtime":1622862957090,"results":"79","hashOfConfig":"49"},{"size":7345,"mtime":1622862957091,"results":"80","hashOfConfig":"49"},{"size":2634,"mtime":1622862957090,"results":"81","hashOfConfig":"49"},{"size":2859,"mtime":1622862957094,"results":"82","hashOfConfig":"49"},{"size":4438,"mtime":1622862957091,"results":"83","hashOfConfig":"49"},{"size":4218,"mtime":1622862957091,"results":"84","hashOfConfig":"49"},{"size":3990,"mtime":1622862957092,"results":"85","hashOfConfig":"49"},{"size":5721,"mtime":1622862957093,"results":"86","hashOfConfig":"49"},{"size":1214,"mtime":1622862957093,"results":"87","hashOfConfig":"49"},{"size":3890,"mtime":1622862957093,"results":"88","hashOfConfig":"49"},{"size":3679,"mtime":1622862957092,"results":"89","hashOfConfig":"49"},{"size":1414,"mtime":1622862957092,"results":"90","hashOfConfig":"49"},{"size":1110,"mtime":1622862957093,"results":"91","hashOfConfig":"49"},{"size":2535,"mtime":1622862957093,"results":"92","hashOfConfig":"49"},{"size":1103,"mtime":1622862957089,"results":"93","hashOfConfig":"49"},{"size":3127,"mtime":1623071126614,"results":"94","hashOfConfig":"49"},{"size":1702,"mtime":1623071393115,"results":"95","hashOfConfig":"49"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"99"},"1epstqx",{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"99"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"99"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"99"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"99"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"99"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"99"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"99"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"99"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"99"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"99"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"99"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"99"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"99"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"99"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"99"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"99"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"99"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"99"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"99"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"99"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"99"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"99"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"99"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"99"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"99"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"215","messages":"216","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/lr/Documents/work/webim4.0/webim4.0/src/index.js",["217"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './i18n/index';\nimport { Provider } from 'react-redux'\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter, Route, HashRouter } from 'react-router-dom'\nimport store from \"./redux/index\";\nimport App from './App';\nimport { createHashHistory } from 'history'\nconst history = createHashHistory()\nReactDOM.render(\n  <Provider store={store}>\n    <HashRouter basename='/' history={history}>\n      <Route path={`/`} component={App}></Route>\n    </HashRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["218","219"],"/Users/lr/Documents/work/webim4.0/webim4.0/src/App.js",[],"/Users/lr/Documents/work/webim4.0/webim4.0/src/reportWebVitals.js",[],"/Users/lr/Documents/work/webim4.0/webim4.0/src/i18n/index.js",[],"/Users/lr/Documents/work/webim4.0/webim4.0/src/redux/index.js",["220"],"import { createStore, applyMiddleware, combineReducers, compose } from 'redux'\nimport { createLogger } from \"redux-logger\";\nimport thunk from 'redux-thunk'\nimport { loginReducer } from \"./login\";\nimport { commonReducer } from \"./common\"\nimport { messageReducer } from \"./message\"\nimport { rosterReducer } from \"./roster\"\nimport { sessionReducer } from './session'\nimport { reducer as groupMemberReducer } from './groupMember'\nimport { reducer as groupReducer } from './group'\nimport { reducer as chatRoomReducer } from './chatRoom'\nimport './webim'\nconst logger = createLogger(); // initialize logger\nconst rootReducer = combineReducers({\n    login: loginReducer,\n    common: commonReducer,\n    message: messageReducer,\n    roster: rosterReducer,\n    session: sessionReducer,\n    group: combineReducers({\n        groupMember: groupMemberReducer,\n        group: groupReducer\n    }),\n    chatRoom: chatRoomReducer\n})\nconst middlewares = [thunk, logger]\nconst enhancers = []\nenhancers.push(applyMiddleware(...middlewares))\nconst composeEnhancers =\n    typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n        ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({})\n        : compose\n\n// const store = createStore(rootReducer, compose(\n//     applyMiddleware(...middlewares),\n//     window.devToolsExtension ? window.devToolsExtension() : f => f\n// ))\n\nconst store = createStore(rootReducer, compose(...enhancers))\n\nexport default store\n\n","/Users/lr/Documents/work/webim4.0/webim4.0/src/redux/login.js",[],"/Users/lr/Documents/work/webim4.0/webim4.0/src/common/routes.js",[],"/Users/lr/Documents/work/webim4.0/webim4.0/src/redux/common.js",["221"],"import { createReducer, createActions } from 'reduxsauce'\nimport Immutable from 'seamless-immutable'\nimport Cookie from 'js-cookie'\n\n/* ------------- Types and Action Creators ------------- */\nconst { Types, Creators } = createActions({\n    setLoading: ['fetching'],\n    setActiveContact: ['chatType', 'contact']\n})\n\nconst INITIAL_STATE = {\n    fetching: false,\n    activeContact: null\n}\n/* ------------- Reducers ------------- */\n\nexport const setLoading = (state = INITIAL_STATE, { fetching }) => {\n    return Immutable.merge(state, {\n        fetching\n    })\n}\nexport const setActiveContact = (state, { chatType, contact }) => {\n    return state.merge({ activeChatType: chatType, activeContact: contact })\n}\n\n\n/* ------------- Hookup Reducers To Types ------------- */\nexport const commonReducer = createReducer(INITIAL_STATE, {\n    [Types.SET_LOADING]: setLoading,\n    [Types.SET_ACTIVE_CONTACT]: setActiveContact\n})\n\nexport default Creators\n\n","/Users/lr/Documents/work/webim4.0/webim4.0/src/redux/roster.js",["222","223"],"import { createReducer, createActions } from 'reduxsauce'\nimport Immutable from 'seamless-immutable'\nimport _ from 'lodash'\nimport WebIM from \"../common/WebIM\";\nimport CommonActions from '@/redux/common'\n/* ------------- Types and Action Creators ------------- */\nconst { Types, Creators } = createActions({\n    updateRoster: ['roster'],\n    // get contacts list\n    getContacts: () => {\n        return (dispatch, getState) => {\n            dispatch(CommonActions.setLoading(true))\n            WebIM.conn.getRoster({\n                success: roster => {\n                    let rosterNames = roster.map(item => item.name)\n                    WebIM.conn.fetchUserInfoById(rosterNames).then((res) => {\n                        let infos = res.data\n                        roster.forEach((item) => {\n                            item.info = infos[item.name]\n                        })\n                        console.log('---- roster--- ', roster)\n                        dispatch(Creators.updateRoster(roster))\n                        dispatch(CommonActions.setLoading(false))\n                    })\n                },\n                error: error => {\n                    dispatch(CommonActions.setLoading(false))\n                }\n            })\n        }\n    },\n    // add contact\n    addContact: to => {\n        return (dispatch, getState) => {\n            const username = WebIM.conn.context.userId\n            WebIM.conn.subscribe({\n                to: to,\n                message: username + ' request to add friends'\n            })\n        }\n    },\n})\n/* ------------- Reducers ------------- */\nfunction isFriend(v) {\n    return v.subscription != 'none'\n}\nexport const updateRoster = (state, { roster }) => {\n    let byName = {},\n        names = [],\n        friends = []\n    roster.forEach(v => {\n        byName[v.name] = v\n        names = Object.keys(byName).sort()\n        isFriend(v) && friends.push(v.name)\n    })\n    return state.merge({\n        byName,\n        names,\n        friends\n    })\n}\n/* ------------- Initial State ------------- */\nexport const INITIAL_STATE = Immutable({\n    byName: null,\n    names: [],\n    friends: []\n})\n\n/* ------------- Hookup Reducers To Types ------------- */\nexport const rosterReducer = createReducer(INITIAL_STATE, {\n    [Types.UPDATE_ROSTER]: updateRoster,\n})\n\nexport default Creators","/Users/lr/Documents/work/webim4.0/webim4.0/src/redux/session.js",["224","225","226"],"import { createReducer, createActions } from 'reduxsauce'\nimport Immutable from 'seamless-immutable'\nimport _ from 'lodash'\nimport WebIM from \"../common/WebIM\";\nimport CommonActions from '@/redux/common'\nimport AppDB from '@/utils/AppDB';\n/* ------------- Types and Action Creators ------------- */\nconst { Types, Creators } = createActions({\n    setSessionList: ['sessionList'],\n    setCurrentSession: ['userId'],\n    topSession: ['sessionId', 'sessionType'],\n    getSessionList: () => {\n        return (dispatch, getState) => {\n            AppDB.getSessionList().then((res) => {\n                console.log('获取会话列表', res)\n                dispatch(Creators.setSessionList(res))\n            })\n        }\n    }\n})\nexport default Creators\nexport const INITIAL_STATE = Immutable({\n    sessionList: [],\n    currentSession: ''\n})\n/* ------------- Reducers ------------- */\nexport const setSessionList = (state, { sessionList }) => {\n    console.log('sessionList ------', sessionList)\n    return state.merge({ sessionList })\n}\n\nexport const setCurrentSession = (state, { userId }) => {\n    return state.merge({ currentSession: userId })\n}\n\nexport const topSession = (state, { sessionId, sessionType }) => {\n    const sessionList = state.getIn(['sessionList'], Immutable([])).asMutable()\n    let topSession = { sessionId, sessionType }\n    sessionList.forEach((element, index) => {\n        if (sessionId === element.sessionId) {\n            topSession = element;\n            sessionList.splice(index, 1)\n        }\n    });\n    sessionList.unshift(topSession)\n    return state.merge({ sessionList })\n}\n\n/* ------------- Hookup Reducers To Types ------------- */\nexport const sessionReducer = createReducer(INITIAL_STATE, {\n    [Types.SET_SESSION_LIST]: setSessionList,\n    [Types.SET_CURRENT_SESSION]: setCurrentSession,\n    [Types.TOP_SESSION]: topSession\n})","/Users/lr/Documents/work/webim4.0/webim4.0/src/redux/groupMember.js",[],"/Users/lr/Documents/work/webim4.0/webim4.0/src/redux/chatRoom.js",["227"],"import { createReducer, createActions } from 'reduxsauce'\nimport Immutable from 'seamless-immutable'\nimport _ from 'lodash'\nimport WebIM from '@/common/WebIM';\nimport CommonActions from '@/redux/common'\n\n/* ------------- Types and Action Creators ------------- */\nconst { Types, Creators } = createActions({\n    updateChatRooms: ['rooms'],\n    getChatRooms: () => {\n        return (dispatch, getState) => {\n            let pagenum = 1\n            let pagesize = 10\n            dispatch(CommonActions.setLoading(true))\n            WebIM.conn.getChatRooms({\n                pagenum: pagenum,\n                pagesize: pagesize,\n                success: function (resp) {\n                    dispatch(CommonActions.setLoading(false))\n                    resp.data && dispatch(Creators.updateChatRooms(resp.data))\n                },\n                error: function (e) { }\n            })\n        }\n    },\n    joinChatRoom: roomId => {\n        return (dispatch, getState) => {\n            WebIM.conn.joinChatRoom({\n                roomId: roomId\n            })\n        }\n    },\n    quitChatRoom: roomId => {\n        return (dispatch, getState) => {\n            WebIM.conn.quitChatRoom({\n                roomId: roomId\n            })\n        }\n    }\n})\n\n/* ------------- Initial State ------------- */\n\nexport const INITIAL_STATE = Immutable({\n    byId: {},\n    names: []\n})\n\n/* ------------- Reducers ------------- */\nexport const updateChatRooms = (state, { rooms }) => {\n    let byId = {}\n    let names = []\n    rooms.forEach(v => {\n        byId[v.id] = v\n        names.push(v.name + '_#-#_' + v.id)\n    })\n    return state.merge({\n        byId: byId,\n        names: names.sort()\n    })\n}\n\n/* ------------- Hookup Reducers To Types ------------- */\nexport const reducer = createReducer(INITIAL_STATE, {\n    [Types.UPDATE_CHAT_ROOMS]: updateChatRooms\n})\n\nexport default Creators","/Users/lr/Documents/work/webim4.0/webim4.0/src/redux/group.js",["228"],"import { createReducer, createActions } from 'reduxsauce'\nimport Immutable from 'seamless-immutable'\nimport _ from 'lodash'\nimport WebIM from '@/common/WebIM';\nimport CommonActions from '@/redux/common'\n\nconst { Types, Creators } = createActions({\n    updateGroup: ['groups'],\n    dissolveGroup: ['group'],\n    updateGroupInfo: ['info'],\n    getGroups: () => {\n        return (dispatch, getState) => {\n            dispatch(CommonActions.setLoading(true))\n            WebIM.conn.getGroup({\n                success: function (response) {\n                    dispatch(CommonActions.setLoading(false))\n                    dispatch(Creators.updateGroup(response.data))\n                },\n                error: function (e) {\n                    dispatch(CommonActions.setLoading(false))\n                }\n            })\n        }\n    },\n    dissolveGroupAsync: ({ groupId, groupName }) => {\n        return (dispatch, getState) => {\n            WebIM.conn.dissolveGroup({\n                groupId,\n                success: () => {\n                    dispatch(Creators.dissolveGroup({ groupId, groupName }))\n                },\n                error: e => {\n                }\n            })\n        }\n    },\n    updateGroupInfoAsync: info => {\n        return (dispatch, getState) => {\n            WebIM.conn.modifyGroup({\n                groupId: info.groupId,\n                groupName: info.groupName,\n                // description: info.description,\n                success: response => {\n                    // const info = response.data // <-- !!!\n                    dispatch(Creators.updateGroupInfo(info))\n                },\n                error: e => {\n                }\n            })\n        }\n    },\n})\n\n/*---------------- reducer ------------------*/\nexport const updateGroup = (state, { groups }) => {\n    let byId = {}\n    let names = []\n    groups.forEach(v => {\n        byId[v.groupid] = {\n            groupId: v.groupid,\n            groupName: v.groupname\n        }\n        names.push(v.groupname + '_#-#_' + v.groupid)\n    })\n    return state.merge({\n        byId,\n        names: names.sort()\n    })\n}\n\nexport const dissolveGroup = (state, { group }) => {\n    const { groupId, groupName } = group\n    let byId = state.getIn(['byId']).without(groupId)\n    const names = state.getIn(['names']).asMutable()\n    names.splice(names.indexOf(`${groupName}_#-#_${groupId}`), 1)\n    return state.merge({\n        byId,\n        names: names.sort()\n    })\n}\n\nexport const updateGroupInfo = (state, { info }) => {\n    const group = state.getIn(['byId', info.groupId])\n    const oldName = `${group.groupName}_#-#_${group.roomId || group.groupId}`\n    const newName = `${info.groupName}_#-#_${group.roomId || group.groupId}`\n    const names = state.getIn(['names']).asMutable()\n    names.splice(names.indexOf(oldName), 1, newName)\n    return state.setIn(['byId', info.groupId, 'groupName'], info.groupName).set('names', names.sort())\n}\n/* ------------- Initial State ------------- */\n\nexport const INITIAL_STATE = Immutable({\n    groupMember: [],\n    byId: {},\n    names: []\n})\n\n/* ------------- Hookup Reducers To Types ------------- */\n\nexport const reducer = createReducer(INITIAL_STATE, {\n    [Types.UPDATE_GROUP]: updateGroup,\n    [Types.UPDATE_GROUP_INFO]: updateGroupInfo,\n    [Types.DISSOLVE_GROUP]: dissolveGroup,\n})\n\n\nexport default Creators","/Users/lr/Documents/work/webim4.0/webim4.0/src/redux/webim.js",["229","230"],"import { history } from '@/common/routes'\nimport store from '@/redux'\nimport WebIM from '@/common/WebIM'\nimport AppDB from '@/utils/AppDB'\nimport LoginActions from '@/redux/login'\nimport CommonActions from '@/redux/common'\nimport MessageActions from '@/redux/message'\nimport RosterActions from \"@/redux/roster\"\nimport SessionActions from \"@/redux/session\"\n\nWebIM.conn.listen({\n    // success connect\n    onOpened: msg => {\n        const userName = store.getState().login.username\n        // init DB\n        AppDB.init(userName)\n\n        const path = history.location.pathname.indexOf('singleChat') === -1 ? '/singleChat' : history.location.pathname\n        const redirectUrl = `${path}?username=${userName}`\n        console.log('redirectUrl', redirectUrl)\n        history.push(redirectUrl)\n\n        // get session list\n        store.dispatch(SessionActions.getSessionList())\n        // get roster\n        store.dispatch(RosterActions.getContacts())\n\n        // store.dispatch(CommonActions.setLoading(false))\n    },\n\n    onTextMessage: message => {\n        console.log(\"onTextMessage\", message)\n        const { type, from, to } = message\n        const sessionId = type === 'chat' ? from : to\n        const sessionType = {\n            chat: 'singleChat',\n            groupchat: 'groupChat',\n            chatroom: 'chatRoom'\n        }\n        store.dispatch(MessageActions.addMessage(message, 'txt'))\n        store.dispatch(SessionActions.topSession(sessionId, sessionType[type]))\n    },\n\n    onError: (err) => {\n        console.error(err)\n    },\n    onClosed: msg => {\n        console.warn('onClosed', msg)\n    },\n})","/Users/lr/Documents/work/webim4.0/webim4.0/src/redux/message.js",["231","232","233"],"import { formatLocalMessage, formatServerMessage } from '@/utils'\nimport { createReducer, createActions } from 'reduxsauce'\nimport Immutable from 'seamless-immutable'\nimport _ from 'lodash'\nimport store from '@/redux'\nimport WebIM from '@/common/WebIM';\nimport AppDB from '@/utils/AppDB';\n\n\n/* ------------- Initial State ------------- */\nexport const INITIAL_STATE = Immutable({\n    byId: {},\n    singleChat: {},\n    groupChat: {},\n    chatRoom: {},\n    stranger: {},\n    extra: {},\n    unread: {\n        singleChat: {},\n        groupChat: {},\n        chatRoom: {},\n        stranger: {},\n    }\n})\n\n/* -------- Types and Action Creators -------- */\nconst { Types, Creators } = createActions({\n    addMessage: ['message', 'messageType'],\n    deleteMessage: ['msgId'],\n    updateMessageStatus: ['message', 'status'],\n    clearUnread: [\"chatType\", \"sessionId\"],\n    // -async-\n    sendTxtMessage: (to, chatType, message = {}) => {\n        return (dispatch, getState) => {\n            const formatMsg = formatLocalMessage(to, chatType, message, 'txt')\n            const { body, id } = formatMsg\n            const { msg } = body\n            const msgObj = new WebIM.message('txt', id)\n            msgObj.set({\n                to,\n                msg,\n                chatType,\n                ext: message.ext,\n                success: () => {\n                    dispatch(Creators.updateMessageStatus(formatMsg, 'sent'))\n                },\n                fail: () => {\n                    dispatch(Creators.updateMessageStatus(formatMsg, 'fail'))\n                }\n            })\n            WebIM.conn.send(msgObj.body)\n            dispatch(Creators.addMessage(formatMsg))\n        }\n    },\n\n    sendFileMessage: (to, chatType, file) => {\n        return (dispatch, getState) => {\n            let pMessage = null\n            const formatMsg = formatLocalMessage(to, chatType, file, 'file')\n            const { body, id } = formatMsg\n            // const id = WebIM.conn.getUniqueId()\n            const type = 'file'\n            const msgObj = new WebIM.message('file', id)\n            debugger\n            msgObj.set({\n                ext: {\n                    file_length: file.data.size,\n                    file_type: file.data.type\n                },\n                file: file,\n                to,\n                chatType,\n                onFileUploadError: function (error) {\n                    console.log(error)\n                    // dispatch(Creators.updateMessageStatus(pMessage, \"fail\"))\n                    formatMsg.status = 'fail'\n                    dispatch(Creators.updateMessageStatus(formatMsg, 'fail'))\n                },\n                onFileUploadComplete: function (data) {\n                    let url = data.uri + '/' + data.entities[0].uuid\n                    formatMsg.url = url\n                    formatMsg.status = 'sent'\n                    dispatch(Creators.updateMessageStatus(formatMsg, 'sent'))\n                },\n                fail: function () {\n                    dispatch(Creators.updateMessageStatus(formatMsg, 'fail'))\n                },\n            })\n\n            WebIM.conn.send(msgObj.body)\n            dispatch(Creators.addMessage(formatMsg, 'file'))\n        }\n    },\n\n    recallMessage: (to, chatType, message) => {\n        return (dispatch, getState) => {\n            const { id } = message\n            WebIM.conn.recallMessage({\n                to: to,\n                mid: id, // message id\n                type: chatType,\n                success: () => {\n                    dispatch(Creators.deleteMessage(id))\n                },\n                fail: (err) => {\n                    message.error('撤回失败')\n                }\n            })\n        }\n    },\n\n    clearUnreadAsync: (chatType, sessionId) => {\n        return (dispatch) => {\n            dispatch({ 'type': 'CLEAR_UNREAD', chatType, sessionId })\n            AppDB.readMessage(chatType, sessionId)\n        }\n    },\n})\n\n/* ------------- Reducers ------------- */\nexport const addMessage = (state, { message, messageType = 'txt' }) => {\n    const rootState = store.getState()\n    // console.log('******* rootState ****', message)\n    !message.status && (message = formatServerMessage(message, messageType)) //remote messages do not have a status field\n    console.log('格式化的消息', message)\n    const username = WebIM.conn.context.userId//_.get(state, 'login.username', '')\n    const { id, to, status } = message\n    let { chatType } = message\n    // where the message comes from, when from current user, it is null\n    const from = message.from || username\n    // bySelf is true when sent by current user, otherwise is false\n    const bySelf = from === username\n    // root id: when sent by current user or in group chat, is id of receiver. Otherwise is id of sender\n    let chatId = bySelf || chatType !== 'singleChat' ? to : from\n\n    // change type as stranger\n    // if (chatType === \"singleChat\" && !state.roster.byName[chatId]) {\n    //     chatType = \"stranger\";\n    //     message.chatType = \"stranger\";\n    //     chatId = from\n    // }\n    // update message array\n    const chatData = state.getIn([chatType, chatId], Immutable([])).asMutable()\n    const _message = {\n        ...message,\n        bySelf,\n        time: +new Date(),\n        status: status\n    }\n\n    // ???\n    // the pushed message maybe have exsited in state, ignore\n    if (_message.chatType === 'chatRoom' && bySelf) {\n        const oid = state.getIn(['byMid', _message.id, 'id'])\n        if (oid) {\n            _message.id = oid\n        }\n    }\n    let isPushed = false\n    chatData.forEach(m => {\n        if (m.id === _message.id) {\n            isPushed = true\n        }\n    })\n\n    !isPushed && chatData.push(_message)\n\n    // add a message to db, if by myselt, isUnread equals 0\n    !isPushed && AppDB.addMessage(_message, !bySelf ? 1 : 0)\n\n    const maxCacheSize = _.includes(['groupChat', 'chatRoom'], chatType) ? WebIM.config.groupMessageCacheSize : WebIM.config.p2pMessageCacheSize\n    if (chatData.length > maxCacheSize) {\n        const deletedChats = chatData.splice(maxCacheSize, chatData.length - maxCacheSize)\n        let byId = state.getIn(['byId'])\n        byId = _.omit(byId, _.map(deletedChats, 'id'))\n        state = state.setIn(['byId'], byId)\n    }\n\n    state = state.setIn([chatType, chatId], chatData)\n\n    // unread\n    const currentSession = _.get(rootState, ['session', 'currentSession'])\n    const addSingleChatUnread = !bySelf && !isPushed && message.from !== currentSession && (chatType === 'singleChat' || chatType === 'strager')\n    const addGroupUnread = !bySelf && !isPushed && message.to !== currentSession && (chatType === 'groupChat' || chatType === 'chatRoom')\n    if (addSingleChatUnread || addGroupUnread) {\n        let count = state.getIn(['unread', chatType, chatId], 0)\n        state = state.setIn(['unread', chatType, chatId], ++count)\n    }\n\n    state = state.setIn(['byId', id], { chatType, chatId })\n\n    return state\n}\n\nexport const updateMessageStatus = (state, { message, status = '' }) => {\n    let { id } = message\n    if (!id) id = state.getIn(['byMid', message.mid, 'id'])\n    let mids = state.getIn(['byMid']) || {}\n    let mid\n    for (var i in mids) {\n        if (mids[i].id === id) {\n            mid = i\n        }\n    }\n    const byId = state.getIn(['byId', id])\n    if (!_.isEmpty(byId)) {\n        const { type, chatId } = byId\n        let messages = state.getIn([type, chatId]).asMutable()\n        let found = _.find(messages, { id: parseInt(id) })\n        let msg = found.setIn(['status'], status)\n        msg = found.setIn(['toJid'], mid)\n        messages.splice(messages.indexOf(found), 1, msg)\n        AppDB.updateMessageStatus(id, status).then(res => { })\n        state = state.setIn([type, chatId], messages)\n    }\n    return state\n}\n\nexport const deleteMessage = (state, { msgId }) => {\n    msgId = msgId.mid || msgId\n    const byId = state.getIn(['byId', msgId])\n    if (!byId) { return console.error(`not found message: ${msgId}`) }\n    const { chatType, chatId } = byId\n    let messages = state.getIn([chatType, chatId]).asMutable()\n    let targetMsg = _.find(messages, { id: msgId })\n    const index = messages.indexOf(targetMsg)\n    messages.splice(index, 1, {\n        ...targetMsg,\n        body: {\n            ...targetMsg.body,\n            type: 'recall'\n        }\n    })\n    state = state.setIn([chatType, chatId], messages)\n    AppDB.deleteMessage(msgId)\n\n    return state\n}\n\nexport const clearUnread = (state, { chatType, sessionId }) => {\n    let data = state['unread'][chatType].asMutable()\n    delete data[sessionId]\n    return state.setIn(['unread', chatType], data)\n}\n\n/* ------------- Hookup Reducers To Types ------------- */\n\nexport const messageReducer = createReducer(INITIAL_STATE, {\n    [Types.ADD_MESSAGE]: addMessage,\n    [Types.DELETE_MESSAGE]: deleteMessage,\n    [Types.CLEAR_UNREAD]: clearUnread\n})\n\nexport default Creators","/Users/lr/Documents/work/webim4.0/webim4.0/src/components/common/Loading.js",[],"/Users/lr/Documents/work/webim4.0/webim4.0/src/utils/index.js",["234","235","236"],"import Cookie from 'js-cookie';\nimport qs from 'qs'\nimport WebIM from '@/common/WebIM'\nimport moment from 'moment'\nconst { username } = qs.parse(window.location.hash.split('?')[1]);\n\n(function (doc, win) {\n    var docEl = doc.documentElement,\n        resizeEvt = \"orientationchange\" in window ? \"orientationchange\" : \"resize\",\n        recalc = function () {\n            // if (docEl.clientWidth > 750) {\n            //     docEl.style.fontSize = \"100px\";\n            // } else {\n            //     var width = docEl.clientWidth / 7.5;\n            //     docEl.style.fontSize = width + \"px\";\n            // }\n        };\n    if (!doc.addEventListener) return;\n    win.addEventListener(resizeEvt, recalc, false);\n    doc.addEventListener(\"DOMContentLoaded\", recalc, false);\n})(document, window);\n\nexport function getToken() {\n    return Cookie.get('web_im_' + username);\n}\n\nexport function getUserName() {\n    return username\n}\n\nconst msgTpl = {\n    base: {\n        error: false,\n        errorCode: '',\n        errorText: '',\n        // if status is blank, it's treated as \"sent\" from server side\n        status: 'sending', // [sending, sent ,fail, read]\n        id: '',\n        // from - room id need it,should not be deleted\n        from: '',\n        to: '',\n        toJid: '',\n        time: '',\n        chatType: '', // chat / groupchat\n        body: {},\n        ext: {},\n        bySelf: false\n    },\n    txt: {\n        type: 'txt',\n        msg: ''\n    },\n    img: {\n        type: 'img',\n        file_length: 0,\n        filename: '',\n        filetype: '',\n        length: 0,\n        secret: '',\n        width: 0,\n        height: 0,\n        url: '',\n        thumb: '',\n        thumb_secret: ''\n    },\n    file: {\n        type: 'file',\n        file_length: 0,\n        filename: '',\n        filetype: '',\n        length: 0,\n        secret: '',\n        width: 0,\n        height: 0,\n        url: '',\n        thumb: '',\n        thumb_secret: '',\n        size: ''\n    },\n    video: {\n        type: 'video',\n        file_length: 0,\n        filename: '',\n        filetype: '',\n        length: 0,\n        secret: '',\n        width: 0,\n        height: 0,\n        url: '',\n        thumb: '',\n        thumb_secret: ''\n    },\n    audio: {\n        type: 'audio',\n        file_length: 0,\n        filename: '',\n        filetype: '',\n        length: 0,\n        secret: '',\n        width: 0,\n        height: 0,\n        url: '',\n        thumb: '',\n        thumb_secret: ''\n    },\n    custom: {\n        type: 'custom',\n        customEvent: '',\n        customExts: {}\n    }\n}\n\nexport function formatLocalMessage(to, chatType, message = {}, messageType) {\n    const ext = message.ext || {}\n    const formatMsg = Object.assign(msgTpl.base, message)\n    const body = Object.assign(msgTpl[messageType], message)\n    return {\n        ...formatMsg,\n        id: WebIM.conn.getUniqueId(),\n        to,\n        from: WebIM.conn.context.userId,\n        chatType,\n        session: to,\n        body: {\n            ...body,\n            ...ext\n        }\n    }\n}\n\nexport function formatServerMessage(message = {}, messageType) {\n    const ext = message.ext || {}\n    const formatMsg = Object.assign(msgTpl.base, message)\n    const body = Object.assign(msgTpl[messageType], message)\n    let chatType = message.type\n    if (chatType === 'chat') chatType = 'singleChat';\n    if (chatType === 'groupchat') chatType = 'groupChat'\n    if (chatType === 'chatroom') chatType = 'chatRoom'\n    if (messageType === 'txt') {\n        body.msg = message.data;\n        body.type = 'txt'\n    }\n    return {\n        ...formatMsg,\n        status: 'sent',\n        chatType,\n        session: message.from,\n        body: {\n            ...body,\n            ...ext,\n            chatType\n        }\n    }\n}\n\nexport function renderTime(time) {\n    if (!time) return ''\n    const localStr = new Date(time)\n    const localMoment = moment(localStr)\n    const localFormat = localMoment.format('MM-DD hh:mm')\n    return localFormat\n}\n\nexport function getGroupName(str) {\n    const [name, id] = str.split(\"_#-#_\")\n    return name\n}\nexport function getGroupId(str) {\n    const [name, id] = str.split(\"_#-#_\")\n    return id\n}\n","/Users/lr/Documents/work/webim4.0/webim4.0/src/pages/main/index.js",["237","238","239","240"],"import React, { Component, useState, memo, useEffect, useCallback } from 'react'\nimport Box from '@material-ui/core/Box';\nimport { makeStyles } from '@material-ui/core/styles';\nimport withWidth, { isWidthUp, isWidthDown } from '@material-ui/core/withWidth';\nimport SessionList from '@/components/session/sessionList'\nimport AppBar from '@/components/appbar/appBar'\nimport Chat from '@/components/chat/index'\nimport { useParams, Route } from \"react-router-dom\";\nimport _ from 'lodash'\nimport { useSelector, useDispatch } from 'react-redux'\nimport SessionActions from '@/redux/session'\nimport MessageActions from '@/redux/message'\nconst MemoAppBar = memo(AppBar)\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        display: 'flex',\n        flexDirection: 'column',\n        '& main': {\n            display: 'flex',\n            flex: 1\n        }\n    },\n    aside: {\n        width: '30vw',\n    },\n    article: {\n        flex: 1\n    },\n    paper: {\n        padding: theme.spacing(2),\n        textAlign: 'center',\n        color: theme.palette.text.secondary,\n    },\n}));\n\nfunction Main(props) {\n    let { chatType, to } = useParams();\n    // let match = useRouteMatch();\n    const classes = useStyles();\n    const dispatch = useDispatch()\n    const messageList = useSelector(state => _.get(state, ['message', chatType, to], [])) || []\n    console.log('当前人的消息', messageList, to, chatType)\n    const [showLeft, setShowLeft] = useState(true)\n    const [showRight, setShowRight] = useState(true)\n    const [isSmallScreen, setIsSmallScreen] = useState(false)\n\n    useEffect(() => {\n        to && dispatch(SessionActions.setCurrentSession(to))\n    }, [])\n\n    console.log(`当前宽度: ${props.width}`)\n    // when width changed relayout\n    useEffect(() => {\n        if (isWidthUp('sm', props.width)) {\n            console.log('大屏幕')\n            setShowRight(true)\n            setIsSmallScreen(false)\n            setShowLeft(true)\n            setShowRight(true)\n        } else {\n            console.log('小屏幕')\n            setShowRight(false)\n            setIsSmallScreen(true)\n            setShowLeft(true)\n            setShowRight(false)\n        }\n    }, [props.width])\n\n    const handleGoBack = useCallback(() => {\n        if (isWidthUp('xs', props.width)) {\n            setShowLeft(true)\n            setShowRight(false)\n        }\n    }, [props.width])\n\n    const handleClickItem = useCallback((session) => {\n        console.log('handleClickItem', session)\n        const { sessionType, sessionId } = session\n        const redirectPath = `/${sessionType}/` + [sessionId].join('/')\n        dispatch(SessionActions.setCurrentSession(sessionId))\n        dispatch(MessageActions.clearUnreadAsync(sessionType, sessionId))\n        props.history.push(redirectPath + props.location.search)\n        if (isWidthDown('xs', props.width)) {\n            setShowLeft(false)\n            setShowRight(true)\n        }\n    }, [props.width])\n    return (\n        <div className={classes.root}>\n            <header>\n                <MemoAppBar\n                    {...props}\n                    isSmallScreen={isSmallScreen}\n                    showLeft={showLeft}\n                    showRight={showRight}\n                    onGoBack={handleGoBack} />\n            </header>\n            <main>\n                <aside className={classes.aside} style={{ display: showLeft ? 'block' : 'none', width: isSmallScreen ? '100vw' : '30vw' }}>\n                    <SessionList onClickItem={handleClickItem} />\n                </aside>\n\n                <article className={classes.article} style={{ display: showRight ? 'block' : 'none' }}>\n                    {/* <MemoAppBar onGoBack={handleGoBack} /> */}\n                    {/* <Chat chatType={chatType} to={to} /> */}\n                    <Route\n                        path=\"/:chatType/:to\"\n                        render={props => <Chat {...props} messageList={messageList} />}\n                    />\n                </article>\n            </main>\n        </div >\n    )\n}\n\nexport default withWidth()(Main);\n\n\n","/Users/lr/Documents/work/webim4.0/webim4.0/src/common/WebIM.js",[],"/Users/lr/Documents/work/webim4.0/webim4.0/src/utils/AppDB.js",[],"/Users/lr/Documents/work/webim4.0/webim4.0/src/theme/index.jsx",["241","242","243","244"],"import React from 'react';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { green, orange } from '@material-ui/core/colors';\n\nimport { deepSea } from './deepSea'\n\nexport default function Theme(props) {\n    return (\n        <ThemeProvider theme={deepSea}>\n            {props.children}\n        </ThemeProvider>\n    );\n}\n\n","/Users/lr/Documents/work/webim4.0/webim4.0/src/pages/register/index.jsx",["245","246","247","248","249","250"],"import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux'\nimport withWidth, { isWidthUp } from '@material-ui/core/withWidth';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Container from '@material-ui/core/Container';\nimport i18next from \"i18next\";\nimport { message } from '@/components/common/Alert'\nimport LoginActions from '@/redux/login'\nimport { history } from '@/common/routes'\nimport useStyles from '@/pages/login/style'\nimport agora from '@/assets/images/agora@2x.png'\n\nimport FormControl from '@material-ui/core/FormControl';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport IconButton from '@material-ui/core/IconButton';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport clsx from 'clsx';\n\nfunction Register(props) {\n    // console.log('login 刷新了', history)\n    // const num = useSelector(state => state.num);\n    const dispatch = useDispatch();\n\n    const classes = useStyles(props);\n\n    useEffect(() => {\n        if (isWidthUp('sm', props.width)) {\n            console.log('大屏幕')\n            setShowBanner(true)\n        } else {\n            console.log('小屏幕')\n            setShowBanner(false)\n        }\n    }, [props.width])\n\n    const [showBanner, setShowBanner] = useState(true)\n    const [values, setValues] = useState({\n        userName: '',\n        password: '',\n        showPassword: false,\n    });\n\n    const handleClickShowPassword = () => {\n        setValues({ ...values, showPassword: !values.showPassword });\n    };\n\n    const handleMouseDownPassword = (event) => {\n        event.preventDefault();\n    };\n\n    const handleChange = (prop) => (event) => {\n        setValues({ ...values, [prop]: event.target.value });\n    };\n\n    const handleRegister = (e) => {\n        e.preventDefault()\n        if (!values.userName || !values.password) {\n            return message.error(i18next.t('The user name or password cannot be empty'))\n        }\n\n        // dispatch(LoginActions.login(userName, password))\n        // props.login(userName, password)\n        // props.setLoading(true)\n    }\n    return (\n        <div className={classes.container} >\n\n\n            <Box className={classes.bannerBox} style={{ display: showBanner ? 'flex' : 'none' }}>\n                <Box></Box>\n            </Box>\n            <Box className={classes.formBox}>\n                <Box className=\"formContainer\">\n                    <Box className={classes.logoContainer}>\n                        <img src={agora} alt='agora' />\n                    </Box>\n                    <form className={classes.form} >\n                        <TextField\n                            margin=\"normal\"\n                            required\n                            value={values.userName}\n                            fullWidth\n                            id=\"email\"\n                            label={i18next.t('username')}\n                            name=\"email\"\n                            autoFocus\n                            onChange={handleChange('userName')}\n                        />\n                        {/* <TextField\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            name=\"password\"\n                            label={i18next.t('password')}\n                            type=\"password\"\n                            id=\"password\"\n                            onChange={handleChange('password')}\n                        /> */}\n                        <FormControl className={classes.password}>\n                            <InputLabel htmlFor=\"standard-adornment-password\">{i18next.t('password')}</InputLabel>\n                            <Input\n                                id=\"standard-adornment-password\"\n                                type={values.showPassword ? 'text' : 'password'}\n                                value={values.password}\n                                onChange={handleChange('password')}\n                                endAdornment={\n                                    <InputAdornment position=\"end\">\n                                        <IconButton\n                                            aria-label=\"toggle password visibility\"\n                                            onClick={handleClickShowPassword}\n                                            onMouseDown={handleMouseDownPassword}\n                                        >\n                                            {values.showPassword ? <Visibility /> : <VisibilityOff />}\n                                        </IconButton>\n                                    </InputAdornment>\n                                }\n                            />\n                        </FormControl>\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className={classes.submit}\n                            onClick={handleRegister}\n                        >\n                            {i18next.t('signup')}\n                        </Button>\n\n                        <Grid container>\n                            <Grid item className={classes.registerText}>\n                                {i18next.t(\"Already have an account\")}\n                                <Link href=\"#/login\" variant=\"body2\">\n                                    {i18next.t('signin')}\n                                </Link>\n                            </Grid>\n                        </Grid>\n                    </form>\n                </Box>\n            </Box>\n        </div >\n    );\n}\n\nexport default withWidth()(Register);\n\n\n\n","/Users/lr/Documents/work/webim4.0/webim4.0/src/pages/login/index.jsx",["251","252","253","254"],"import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux'\nimport withWidth, { isWidthUp } from '@material-ui/core/withWidth';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Container from '@material-ui/core/Container';\nimport i18next from \"i18next\";\nimport { message } from '@/components/common/Alert'\nimport LoginActions from '@/redux/login'\nimport CommonActions from '@/redux/common'\nimport { history } from '@/common/routes'\nimport useStyles from './style'\nimport agora from '@/assets/images/agora@2x.png'\n\nimport FormControl from '@material-ui/core/FormControl';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport IconButton from '@material-ui/core/IconButton';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport clsx from 'clsx';\n\nfunction Login(props) {\n    // console.log('login 刷新了', history)\n    // const num = useSelector(state => state.num);\n    const dispatch = useDispatch();\n\n    const classes = useStyles(props);\n\n    useEffect(() => {\n        if (isWidthUp('sm', props.width)) {\n            console.log('大屏幕')\n            setShowBanner(true)\n        } else {\n            console.log('小屏幕')\n            setShowBanner(false)\n        }\n    }, [props.width])\n\n    const [showBanner, setShowBanner] = useState(true)\n    const [values, setValues] = useState({\n        userName: '',\n        password: '',\n        showPassword: false,\n    });\n\n    const handleClickShowPassword = () => {\n        setValues({ ...values, showPassword: !values.showPassword });\n    };\n\n    const handleMouseDownPassword = (event) => {\n        event.preventDefault();\n    };\n\n    const handleChange = (prop) => (event) => {\n        setValues({ ...values, [prop]: event.target.value });\n    };\n\n    const handleLogin = (e) => {\n        e.preventDefault()\n        if (!values.userName || !values.password) {\n            return message.error(i18next.t('The user name or password cannot be empty'))\n        }\n\n        dispatch(LoginActions.login(values.userName, values.password))\n        dispatch(CommonActions.setLoading(true))\n\n    }\n    return (\n        <div className={classes.container} >\n            <Box className={classes.bannerBox} style={{ display: showBanner ? 'flex' : 'none' }}>\n                <Box></Box>\n            </Box>\n            <Box className={classes.formBox}>\n                <Box className=\"formContainer\">\n                    <Box className={classes.logoContainer}>\n                        <img src={agora} alt='agora' />\n                    </Box>\n                    <form className={classes.form} >\n                        <TextField\n                            margin=\"normal\"\n                            required\n                            value={values.userName}\n                            fullWidth\n                            id=\"email\"\n                            label={i18next.t('username')}\n                            name=\"email\"\n                            autoFocus\n                            onChange={handleChange('userName')}\n                        />\n                        {/* <TextField\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            name=\"password\"\n                            label={i18next.t('password')}\n                            type=\"password\"\n                            id=\"password\"\n                            onChange={handleChange('password')}\n                        /> */}\n                        <FormControl className={classes.password}>\n                            <InputLabel htmlFor=\"standard-adornment-password\">{i18next.t('password')}</InputLabel>\n                            <Input\n                                id=\"standard-adornment-password\"\n                                type={values.showPassword ? 'text' : 'password'}\n                                value={values.password}\n                                onChange={handleChange('password')}\n                                endAdornment={\n                                    <InputAdornment position=\"end\">\n                                        <IconButton\n                                            aria-label=\"toggle password visibility\"\n                                            onClick={handleClickShowPassword}\n                                            onMouseDown={handleMouseDownPassword}\n                                        >\n                                            {values.showPassword ? <Visibility /> : <VisibilityOff />}\n                                        </IconButton>\n                                    </InputAdornment>\n                                }\n                            />\n                        </FormControl>\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className={classes.submit}\n                            onClick={handleLogin}\n                        >\n                            {i18next.t('signin')}\n                        </Button>\n\n                        <Grid container>\n                            <Grid item className={classes.registerText}>\n                                {i18next.t(\"Don't have an account\")}\n                                <Link href=\"#/register\" variant=\"body2\">\n                                    {i18next.t('signup')}\n                                </Link>\n                            </Grid>\n                        </Grid>\n                    </form>\n                </Box>\n            </Box>\n        </div >\n    );\n}\n\nexport default withWidth()(Login);\n\n","/Users/lr/Documents/work/webim4.0/webim4.0/src/common/WebIMConfig.js",[],"/Users/lr/Documents/work/webim4.0/webim4.0/src/components/chat/index.js",[],"/Users/lr/Documents/work/webim4.0/webim4.0/src/theme/deepSea.js",[],"/Users/lr/Documents/work/webim4.0/webim4.0/src/pages/login/style.js",[],"/Users/lr/Documents/work/webim4.0/webim4.0/src/components/common/Alert.js",[],"/Users/lr/Documents/work/webim4.0/webim4.0/src/components/session/sessionList.jsx",["255","256","257","258"],"import React, { useEffect, useMemo } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport { useSelector, useDispatch } from 'react-redux'\nimport { renderTime } from '@/utils'\nimport groupIcon from '@/assets/images/group@2x.png'\nimport chatRoomIcon from '@/assets/images/chatroom@2x.png'\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        height: '100%',\n        backgroundColor: 'rgba(206, 211, 217, 0.3)',\n        margin: 0,\n        padding: 0\n    },\n    listItem: {\n        height: theme.spacing(18),\n        padding: '0 14px'\n    },\n    itemBox: {\n        display: 'flex',\n        flex: 1,\n        height: '100%',\n        alignItems: 'center',\n        borderBottom: '0.5px solid rgba(0, 0, 0, 0.1)',\n        boxSizing: 'border-box',\n    },\n    avatar: {\n        height: theme.spacing(12),\n        width: theme.spacing(12)\n    },\n    MuiListItemTextSecondary: {\n        color: 'red'\n    },\n    itemRightBox: {\n        flex: 1,\n    },\n    itemName: {\n        fontSize: '16px',\n        overflow: 'hidden',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'space-between'\n    },\n    itemMsgBox: {\n        position: 'relative',\n        height: '20px',\n        display: 'flex',\n        alignItems: 'center'\n    },\n    time: {\n        display: 'inline-block',\n        height: '17px',\n        fontSize: '12px',\n        color: 'rgba(1, 1, 1, .6)',\n        marginRight: '2px'\n    },\n    itemMsg: {\n        display: 'inline-block',\n        height: '20px',\n        overflow: 'hidden',\n        color: 'rgba(1, 1, 1, .6)',\n        width: 'calc(100% - 18px)',\n        fontSize: '14px',\n    },\n    unreadNum: {\n        color: '#fff',\n        background: 'rgba(245, 39, 0, 1)',\n        display: 'inline-block',\n        height: '16px',\n        borderRadius: '8px',\n        fontSize: '10px',\n        minWidth: '16px',\n        textAlign: 'center',\n        position: 'absolute',\n        right: '0'\n    }\n}));\n\nexport default function SessionList(props) {\n    const classes = useStyles();\n    const sessionList = useSelector(state => state.session.sessionList) || []\n    const message = useSelector(state => state.message)\n    const { unread } = message\n    const currentSession = useSelector(state => state.session.currentSession)\n    let currentSessionIndex = 0\n    console.log('******&&&&&& sessionList', sessionList)\n    const renderSessionList = sessionList.asMutable({ deep: true })\n        .map((session) => {\n            const chatMsgs = message?.[session.sessionType][session.sessionId] || []\n            if (chatMsgs.length > 0) {\n                session.lastMessage = chatMsgs[chatMsgs.length - 1]\n                session.unreadNum = unread[session.sessionType][session.sessionId]\n            }\n            return session\n        })\n        .sort((a, b) => {\n            if (!a?.lastMessage?.time) return 1\n            if (!b?.lastMessage?.time) return -1\n            return b?.lastMessage?.time - a?.lastMessage?.time\n        })\n\n    renderSessionList.forEach((element, index) => {\n        if (element.sessionId === currentSession) {\n            currentSessionIndex = index\n        }\n    });\n\n    const handleListItemClick = (event, index, session) => {\n        if (currentSessionIndex !== index) {\n            props.onClickItem(session)\n        }\n    };\n\n    return (\n        <List dense className={classes.root}>\n            {renderSessionList.map((session, index) => {\n                let avatarSrc = ''\n                if (session.sessionType === 'groupChat') {\n                    avatarSrc = groupIcon\n                }\n                else if (session.sessionType === 'chatRoom') {\n                    avatarSrc = chatRoomIcon\n                }\n                return (\n                    <ListItem key={session.sessionId}\n                        selected={currentSessionIndex === index}\n                        onClick={(event) => handleListItemClick(event, index, session)}\n                        button className={classes.listItem}>\n                        <Box className={classes.itemBox}>\n                            <ListItemAvatar>\n                                <Avatar\n                                    className={classes.avatar}\n                                    alt={`session.sessionId`}\n                                    src={avatarSrc}\n                                />\n                            </ListItemAvatar>\n                            <Box className={classes.itemRightBox}>\n                                <Typography className={classes.itemName}>\n                                    <span>{session.sessionId}</span>\n\n                                    <span className={classes.time}>{renderTime(session?.lastMessage?.time)}</span>\n                                </Typography>\n                                <Typography className={classes.itemMsgBox}>\n                                    <span className={classes.itemMsg}>{session?.lastMessage?.body?.msg}</span>\n                                    <span className={classes.unreadNum} style={{ display: session.unreadNum ? 'inline-block' : 'none' }}>{session.unreadNum}</span>\n                                </Typography>\n                            </Box>\n                        </Box>\n                    </ListItem>\n                );\n            })}\n        </List>\n    );\n}\n\nSessionList.defaultProps = {\n    haha: 11\n};\n\n","/Users/lr/Documents/work/webim4.0/webim4.0/src/components/appbar/appBar.jsx",["259","260","261","262","263","264","265","266","267"],"/Users/lr/Documents/work/webim4.0/webim4.0/src/components/appbar/addGroup/addGroup.js",["268"],"import React, { useState } from 'react'\nimport CommonDialog from '@/components/common/dialog'\nimport i18next from \"i18next\";\nimport { Box, TextField, Button } from '@material-ui/core';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useDispatch, useStore } from 'react-redux'\nimport RosterActions from '@/redux/roster'\nimport { message } from '@/components/common/Alert'\nconst useStyles = makeStyles((theme) => {\n    return ({\n        root: {\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            minWidth: '40vw',\n            paddingBottom: theme.spacing(4),\n            margin: '16px 24px'\n        },\n        inputLabel: {\n            marginBottom: theme.spacing(4),\n            width: '100%'\n        },\n        button: {\n            width: '50%',\n            marginTop: theme.spacing(11),\n            color: \"#fff\"\n        }\n    })\n});\n\nexport default function AddGroupDialog({ open, onClose }) {\n    const classes = useStyles();\n    const dispatch = useDispatch()\n    const [inputValue, setInputValue] = useState('')\n    const [error, setError] = useState(null)\n    const addGroup = () => {\n        if (!inputValue) {\n            return setError(true)\n        }\n        dispatch(RosterActions.addContact(inputValue))\n        message.success(i18next.t('Successfully send the application'))\n        setInputValue('')\n        setError(null)\n        onClose()\n    }\n    const handleChange = (event) => {\n        setInputValue(event.target.value)\n        setError(null)\n    }\n    const handleClose = () => {\n        setInputValue('')\n        setError(null)\n        onClose()\n    }\n    function renderContent() {\n        return (\n            <Box className={classes.root}>\n                <Typography className={classes.inputLabel}>\n                    {i18next.t('Group Id')}\n                </Typography>\n                <TextField\n                    id=\"outlined-basic\" label=\"groupId\" variant=\"outlined\" fullWidth autoFocus name=\"email\"\n                    error={error}\n                    value={inputValue}\n                    onChange={handleChange} />\n                <Button\n                    onClick={addGroup} variant=\"contained\" color=\"primary\" className={classes.button}>\n                    {i18next.t('Add Groups')}\n                </Button>\n            </Box>\n        )\n    }\n\n    return (\n        <CommonDialog\n            open={open}\n            onClose={handleClose}\n            title={i18next.t('Add Groups')}\n            content={renderContent()}\n        ></CommonDialog>\n    )\n}","/Users/lr/Documents/work/webim4.0/webim4.0/src/components/appbar/addressBook/addressBook.js",["269","270","271","272"],"import React, { useState } from 'react'\nimport CommonDialog from '@/components/common/dialog'\nimport i18next from \"i18next\";\nimport _ from 'lodash'\nimport { Box, TextField, Button, ListItemAvatar, Avatar, ListItem, List } from '@material-ui/core';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useDispatch, useSelector } from 'react-redux'\nimport RosterActions from '@/redux/roster'\nimport SessionActions from '@/redux/session'\nimport { message } from '@/components/common/Alert'\nimport groupIcon from '@/assets/images/group@2x.png'\nimport chatRoomIcon from '@/assets/images/chatroom@2x.png'\nimport GroupList from './groupList'\nimport ChatRoomList from './chatRoom'\nimport GroupActions from '@/redux/group'\nimport ChatRoomActions from '@/redux/chatRoom'\nconst useStyles = makeStyles((theme) => {\n    return ({\n        root: {\n            width: '100%',\n            maxHeight: '70vh',\n            minHeight: '35vh',\n            margin: 0,\n            padding: 0\n        },\n        listItem: {\n            height: theme.spacing(14),\n            width: theme.spacing(86),\n            maxWidth: '100%',\n            display: 'flex',\n            alignItems: 'center',\n            boxSizing: 'border-box',\n            padding: '0 20px'\n        },\n        itemBox: {\n            height: '100%',\n            display: 'flex',\n            flex: 1,\n            alignItems: 'center',\n            borderBottom: '0.5px solid rgba(0, 0, 0, 0.1)',\n            boxSizing: 'border-box',\n        },\n        avatar: {\n            height: theme.spacing(10),\n            width: theme.spacing(10)\n        },\n        MuiListItemTextSecondary: {\n            color: 'red'\n        },\n        textBox: {\n            display: 'flex',\n            justifyContent: 'space-between',\n            flex: '1'\n        },\n        itemName: {\n            fontSize: '16px',\n            overflow: 'hidden',\n        },\n    })\n});\n\nexport default function AddressBookDialog(props) {\n    const { open, onClose, history, location } = props\n    const classes = useStyles();\n    const dispatch = useDispatch()\n    const roster = useSelector(state => state.roster) || {}\n    const friends = roster.friends || []\n    const byName = roster.byName || {}\n    const sessionList = useSelector(state => state.session.sessionList.asMutable())\n    const groupList = useSelector(state => state.group.group.names)\n    const chatRoomList = useSelector(state => state.chatRoom.names)\n    const handleClick = (itemData) => {\n        console.log('itemData', itemData)\n        if (typeof itemData === 'string') {\n            const index = _.findIndex(sessionList, item => item.sessionId === itemData);\n            if (index < 0) {\n                sessionList.unshift({ sessionId: itemData, sessionType: 'singleChat' })\n                dispatch(SessionActions.setSessionList(sessionList))\n            }\n            dispatch(SessionActions.setCurrentSession(itemData))\n            onClose();\n\n            const redirectPath = '/singleChat/' + [itemData].join('/')\n            history.push(redirectPath + location.search)\n        } else {\n            const { value } = itemData\n            if (value === 'group') {\n                if (!groupList.length) {\n                    dispatch(GroupActions.getGroups())\n                }\n                setGroupOpen(true)\n            }\n            else if (value === 'chatroom') {\n                if (!chatRoomList.length) {\n                    dispatch(ChatRoomActions.getChatRooms())\n                }\n                setChatRoomOpen(true)\n            }\n        }\n    }\n\n    const [groupOpen, setGroupOpen] = useState(false)\n    const [chatRoomOpen, setChatRoomOpen] = useState(false)\n\n    const handleGroupClose = () => {\n        setGroupOpen(false)\n        onClose()\n    }\n    const handleChatRoomClose = () => {\n        setChatRoomOpen(false)\n        onClose()\n    }\n    function renderContent() {\n        return (\n            <List dense className={classes.root}>\n                <ListItem key={'group'}\n                    onClick={() => handleClick({ value: 'group' })}\n                    button className={classes.listItem}>\n                    <Box className={classes.itemBox}>\n                        <ListItemAvatar>\n                            <Avatar\n                                className={classes.avatar}\n                                alt={`group`}\n                                src={groupIcon}\n                            />\n                        </ListItemAvatar>\n                        <Box className={classes.textBox}>\n                            <Typography className={classes.itemName}>{i18next.t('Group')}</Typography>\n                            <Typography className={classes.itemName}>></Typography>\n                        </Box>\n                    </Box>\n                </ListItem>\n                <ListItem key={'chatroom'}\n                    onClick={() => handleClick({ value: 'chatroom' })}\n                    button className={classes.listItem}>\n                    <Box className={classes.itemBox}>\n                        <ListItemAvatar>\n                            <Avatar\n                                className={classes.avatar}\n                                alt={`chatRoom`}\n                                src={chatRoomIcon}\n                            />\n                        </ListItemAvatar>\n                        <Box className={classes.textBox}>\n                            <Typography className={classes.itemName}>{i18next.t('Chat Room')}</Typography>\n                            <Typography className={classes.itemName}>></Typography>\n                        </Box>\n                    </Box>\n                </ListItem>\n                {friends.map((userId, index) => {\n                    return (\n                        <ListItem key={userId}\n                            onClick={() => handleClick(userId)}\n                            data={userId}\n                            value={userId}\n                            button className={classes.listItem}>\n                            <Box className={classes.itemBox}>\n                                <ListItemAvatar>\n                                    <Avatar\n                                        className={classes.avatar}\n                                        alt={`${userId}`}\n                                    >\n                                        {userId}\n                                    </Avatar>\n                                </ListItemAvatar>\n                                <Box>\n                                    <Typography className={classes.itemName}>\n                                        {byName[userId]?.info?.nickname || userId}</Typography>\n                                </Box>\n                            </Box>\n                        </ListItem>\n                    );\n                })}\n\n            </List>\n        )\n    }\n\n    return (\n        <>\n            <CommonDialog\n                open={open}\n                onClose={onClose}\n                title={i18next.t('Address Book')}\n                content={renderContent()}\n            ></CommonDialog>\n            <GroupList open={groupOpen} onClose={handleGroupClose} />\n            <ChatRoomList open={chatRoomOpen} onClose={handleChatRoomClose} />\n        </>\n    )\n}","/Users/lr/Documents/work/webim4.0/webim4.0/src/components/appbar/addFriend/addFriend.js",["273"],"import React, { useState } from 'react'\nimport CommonDialog from '@/components/common/dialog'\nimport i18next from \"i18next\";\nimport { Box, TextField, Button } from '@material-ui/core';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useDispatch, useStore } from 'react-redux'\nimport RosterActions from '@/redux/roster'\nimport { message } from '@/components/common/Alert'\nconst useStyles = makeStyles((theme) => {\n    return ({\n        root: {\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            minWidth: '40vw',\n            paddingBottom: theme.spacing(4),\n            margin: '16px 24px'\n        },\n        inputLabel: {\n            marginBottom: theme.spacing(4),\n            width: '100%'\n        },\n        button: {\n            width: '50%',\n            marginTop: theme.spacing(11),\n            color: \"#fff\"\n        }\n    })\n});\n\nexport default function AddfriendDialog({ open, onClose }) {\n    const classes = useStyles();\n    const dispatch = useDispatch()\n    const [inputValue, setInputValue] = useState('')\n    const [error, setError] = useState(null)\n    const addFriend = () => {\n        if (!inputValue) {\n            return setError(true)\n        }\n        dispatch(RosterActions.addContact(inputValue))\n        message.success(i18next.t('Successfully send the application'))\n        setInputValue('')\n        setError(null)\n        onClose()\n    }\n    const handleChange = (event) => {\n        setInputValue(event.target.value)\n        setError(null)\n    }\n    const handleClose = () => {\n        setInputValue('')\n        setError(null)\n        onClose()\n    }\n    function renderContent() {\n        return (\n            <Box className={classes.root}>\n                <Typography className={classes.inputLabel}>\n                    {i18next.t('User Id')}\n                </Typography>\n                <TextField\n                    id=\"outlined-basic\" label=\"userId\" variant=\"outlined\" fullWidth autoFocus name=\"email\"\n                    error={error}\n                    value={inputValue}\n                    onChange={handleChange} />\n                <Button\n                    onClick={addFriend} variant=\"contained\" color=\"primary\" className={classes.button}>\n                    {i18next.t('Add Friends')}\n                </Button>\n            </Box>\n        )\n    }\n\n    return (\n        <CommonDialog\n            open={open}\n            onClose={handleClose}\n            title={i18next.t('Add Friends')}\n            content={renderContent()}\n        ></CommonDialog>\n    )\n}","/Users/lr/Documents/work/webim4.0/webim4.0/src/components/common/dialog.js",["274","275","276","277"],"import React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport { withStyles } from '@material-ui/core/styles';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\n// import DialogTitle from '@material-ui/core/DialogTitle';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Slide from '@material-ui/core/Slide';\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nconst styles = (theme) => ({\n    root: {\n        margin: 0,\n        padding: theme.spacing(2),\n    },\n    closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n    },\n});\n\nconst DialogTitle = withStyles(styles)((props) => {\n    const { children, classes, onClose, ...other } = props;\n    return (\n        <MuiDialogTitle disableTypography className={classes.root} {...other}>\n            <Typography variant=\"h6\">{children}</Typography>\n            {onClose ? (\n                <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n                    <CloseIcon />\n                </IconButton>\n            ) : null}\n        </MuiDialogTitle>\n    );\n});\n\nexport default function AlertDialogSlide({ open, title, content, onClose, footer }) {\n    return (\n        <div>\n            <Dialog\n                open={open}\n                TransitionComponent={Transition}\n                keepMounted\n                onClose={onClose}\n                aria-labelledby=\"alert-dialog-slide-title\"\n                aria-describedby=\"alert-dialog-slide-description\"\n            >\n                <DialogTitle id=\"alert-dialog-slide-title\" onClose={onClose}>\n                    {title}\n                </DialogTitle>\n                <DialogContent dividers style={{ padding: '0' }}>\n                    {content}\n                </DialogContent>\n                {\n                    footer ? <DialogActions>\n                        <Button onClick={onClose} color=\"primary\">\n                            Disagree\n                    </Button>\n                        <Button onClick={onClose} color=\"primary\">\n                            Agree\n                    </Button>\n                    </DialogActions> : null\n                }\n            </Dialog>\n        </div>\n    );\n}","/Users/lr/Documents/work/webim4.0/webim4.0/src/components/appbar/addressBook/chatRoom.js",["278","279","280","281","282","283"],"import React, { useState } from 'react'\nimport CommonDialog from '@/components/common/dialog'\nimport i18next from \"i18next\";\nimport { Box, TextField, Button, ListItemAvatar, Avatar, ListItem, List } from '@material-ui/core';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useDispatch, useSelector } from 'react-redux'\nimport RosterActions from '@/redux/roster'\nimport SessionActions from '@/redux/session'\nimport { message } from '@/components/common/Alert'\nimport groupIcon from '@/assets/images/group@2x.png'\nimport chatRoomIcon from '@/assets/images/chatroom@2x.png'\nimport { getGroupName, getGroupId } from '@/utils'\nimport ChatRoomActions from '@/redux/chatRoom'\nimport { history } from '@/common/routes'\nimport _ from 'lodash'\nconst useStyles = makeStyles((theme) => {\n    return ({\n        root: {\n            width: '100%',\n            maxHeight: '70vh',\n            minHeight: '35vh',\n            margin: 0,\n            padding: 0\n        },\n        listItem: {\n            height: theme.spacing(14),\n            width: theme.spacing(86),\n            maxWidth: '100%',\n            display: 'flex',\n            alignItems: 'center',\n            boxSizing: 'border-box',\n            padding: '0 20px'\n        },\n        itemBox: {\n            height: '100%',\n            display: 'flex',\n            flex: 1,\n            alignItems: 'center',\n            borderBottom: '0.5px solid rgba(0, 0, 0, 0.1)',\n            boxSizing: 'border-box',\n        },\n        avatar: {\n            height: theme.spacing(10),\n            width: theme.spacing(10)\n        },\n        MuiListItemTextSecondary: {\n            color: 'red'\n        },\n        textBox: {\n            display: 'flex',\n            justifyContent: 'space-between',\n            flex: '1'\n        },\n        itemName: {\n            fontSize: '16px',\n            overflow: 'hidden',\n        },\n    })\n});\n\nexport default function ChatRoomList({ open, onClose }) {\n    const classes = useStyles();\n    const dispatch = useDispatch()\n    const sessionList = useSelector(state => state.session.sessionList.asMutable())\n    const chatRoomList = useSelector(state => state.chatRoom.names)\n    const handleClose = () => {\n        onClose()\n    }\n    const handleClick = (roomId) => {\n        const index = _.findIndex(sessionList, (item) => item.sessionId === roomId && item.sessionType === 'chatRoom');\n        if (index < 0) {\n            sessionList.unshift({ sessionId: roomId, sessionType: 'chatRoom' })\n            dispatch(SessionActions.setSessionList(sessionList))\n        }\n        dispatch(SessionActions.setCurrentSession(roomId))\n\n        const redirectPath = '/chatRoom/' + [roomId].join('/')\n        history.push(redirectPath + window.location.search)\n        dispatch(ChatRoomActions.joinChatRoom(roomId))\n        onClose()\n    }\n    function renderContent() {\n        return (\n            <List dense className={classes.root}>\n                {\n                    chatRoomList.map((room) => {\n                        return (\n                            <ListItem key={getGroupId(room)}\n                                onClick={() => { handleClick(getGroupId(room)) }}\n                                button className={classes.listItem}>\n                                <Box className={classes.itemBox}>\n                                    <ListItemAvatar>\n                                        <Avatar\n                                            className={classes.avatar}\n                                            alt={`group`}\n                                            src={groupIcon}\n                                        />\n                                    </ListItemAvatar>\n                                    <Box className={classes.textBox}>\n                                        <Typography className={classes.itemName}>\n                                            {getGroupName(room)}\n                                        </Typography>\n                                    </Box>\n                                </Box>\n                            </ListItem>\n                        )\n                    })\n                }\n            </List>\n        )\n    }\n\n    return (\n        <CommonDialog\n            open={open}\n            onClose={handleClose}\n            title={i18next.t('Chat Room')}\n            content={renderContent()}\n        ></CommonDialog>\n    )\n}","/Users/lr/Documents/work/webim4.0/webim4.0/src/components/appbar/addressBook/groupList.js",["284","285","286","287","288","289"],"import React, { useState } from 'react'\nimport CommonDialog from '@/components/common/dialog'\nimport i18next from \"i18next\";\nimport _ from 'lodash'\nimport { Box, TextField, Button, ListItemAvatar, Avatar, ListItem, List } from '@material-ui/core';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useDispatch, useSelector } from 'react-redux'\nimport RosterActions from '@/redux/roster'\nimport SessionActions from '@/redux/session'\nimport { message } from '@/components/common/Alert'\nimport groupIcon from '@/assets/images/group@2x.png'\nimport chatRoomIcon from '@/assets/images/chatroom@2x.png'\nimport { getGroupName, getGroupId } from '@/utils'\nimport { history } from '@/common/routes'\nconst useStyles = makeStyles((theme) => {\n    return ({\n        root: {\n            width: '100%',\n            maxHeight: '70vh',\n            minHeight: '35vh',\n            margin: 0,\n            padding: 0\n        },\n        listItem: {\n            height: theme.spacing(14),\n            width: theme.spacing(86),\n            maxWidth: '100%',\n            display: 'flex',\n            alignItems: 'center',\n            boxSizing: 'border-box',\n            padding: '0 20px'\n        },\n        itemBox: {\n            height: '100%',\n            display: 'flex',\n            flex: 1,\n            alignItems: 'center',\n            borderBottom: '0.5px solid rgba(0, 0, 0, 0.1)',\n            boxSizing: 'border-box',\n        },\n        avatar: {\n            height: theme.spacing(10),\n            width: theme.spacing(10)\n        },\n        MuiListItemTextSecondary: {\n            color: 'red'\n        },\n        textBox: {\n            display: 'flex',\n            justifyContent: 'space-between',\n            flex: '1'\n        },\n        itemName: {\n            fontSize: '16px',\n            overflow: 'hidden',\n        },\n    })\n});\n\nexport default function GroupList({ open, onClose }) {\n    const classes = useStyles();\n    const dispatch = useDispatch()\n    const sessionList = useSelector(state => state.session.sessionList.asMutable())\n    const groupList = useSelector(state => state.group.group.names)\n    const handleClose = () => {\n        onClose()\n    }\n    const handleClick = (groupId) => {\n        const index = _.findIndex(sessionList, (item) => item.sessionId === groupId && item.sessionType === 'groupChat');\n        if (index < 0) {\n            sessionList.unshift({ sessionId: groupId, sessionType: 'groupChat' })\n            dispatch(SessionActions.setSessionList(sessionList))\n        }\n        dispatch(SessionActions.setCurrentSession(groupId))\n\n        const redirectPath = '/groupChat/' + [groupId].join('/')\n        history.push(redirectPath + window.location.search)\n        onClose();\n    }\n    function renderContent() {\n        return (\n            <List dense className={classes.root}>\n                {groupList.map((group) => {\n                    return (\n                        <ListItem key={getGroupId(group)}\n                            onClick={() => { handleClick(getGroupId(group)) }}\n                            button className={classes.listItem}>\n                            <Box className={classes.itemBox}>\n                                <ListItemAvatar>\n                                    <Avatar\n                                        className={classes.avatar}\n                                        alt={`group`}\n                                        src={groupIcon}\n                                    />\n                                </ListItemAvatar>\n                                <Box className={classes.textBox}>\n                                    <Typography className={classes.itemName}>\n                                        {getGroupName(group)}\n                                    </Typography>\n                                </Box>\n                            </Box>\n                        </ListItem>\n                    )\n                })}\n\n            </List>\n        )\n    }\n\n    return (\n        <CommonDialog\n            open={open}\n            onClose={handleClose}\n            title={i18next.t('Group')}\n            content={renderContent()}\n        ></CommonDialog>\n    )\n}","/Users/lr/Documents/work/webim4.0/webim4.0/src/components/chat/messageList.js",["290","291","292","293","294","295","296"],"import React, { memo, useRef, useEffect, useState, useCallback } from 'react';\nimport ReactDOM from 'react-dom'\nimport { makeStyles } from '@material-ui/core/styles';\nimport { FixedSizeList, areEqual } from 'react-window';\nimport AutoSizer from \"react-virtualized-auto-sizer\";\nimport memoize from 'memoize-one';\nimport './index.css'\nimport { useDispatch } from 'react-redux';\nimport MessageActions from '@/redux/message'\nimport RetractedMessage from './messages/retractedMessage';\nimport FileMessage from './messages/fileMessage';\nimport ImgMessage from './messages/imageMessage';\nimport AudioMessage from './messages/audioMessage';\nimport TextMessage from './messages/textMessage';\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        flex: 1,\n        display: 'flex',\n        position: 'absolute',\n        bottom: '210px',\n        top: '0',\n        overflow: 'hidden'\n    },\n}))\n\nconst createItemData = memoize((items) => ({\n    items\n}));\nconst itemData = createItemData([{ a: 1 }, { a: 2 }])\n\nfunction MessageList({ messageList }) {\n    const classes = useStyles();\n    const dispatch = useDispatch()\n    console.log('** Render MessageList **')\n    const scrollEl = useRef(null)\n    const [beforePullDown, setBeforePullDown] = useState(true)\n    const [isPullingDown, setIsPullingDown] = useState(false)\n\n    let _not_scroll_bottom = false\n    // useEffect(() => {\n    //     document.oncontextmenu = function (e) {\n    //         console.log('oncontextmenu', e);\n    //         e.stopPropagation()\n    //         return false\n    //     }\n    // }, [])\n\n    useEffect(() => {\n        if (!_not_scroll_bottom) {\n            setTimeout(() => {\n                const dom = scrollEl.current\n                if (!ReactDOM.findDOMNode(dom)) return\n                dom.scrollTop = dom.scrollHeight\n            }, 0)\n        }\n    })\n\n    const handleRecallMsg = useCallback((message) => {\n        console.log('handleRecallMsg', message)\n        const { to, chatType } = message\n        dispatch(MessageActions.recallMessage(to, chatType, message))\n    }, [dispatch])\n    return (\n        <div className={classes.root}>\n            <div ref={scrollEl} className=\"pulldown-wrapper\">\n                <div className=\"pulldown-tips\">\n                    <div style={{ display: beforePullDown ? 'block' : 'none' }}>\n                        <span>Pull Down and refresh</span>\n                    </div>\n                    <div style={{ display: !beforePullDown ? 'block' : 'none' }}>\n                        <div style={{ display: isPullingDown ? 'block' : 'none' }}>\n                            <span>Loading...</span>\n                        </div>\n                        <div style={{ display: !isPullingDown ? 'block' : 'none' }}><span>Refresh success</span></div>\n                    </div>\n                </div>\n                <ul className=\"pulldown-list\">\n                    {messageList.map((msg) => {\n                        if (msg.body.type === 'txt') {\n                            return <TextMessage message={msg} key={msg.id} onRecallMessage={handleRecallMsg} />\n                        }\n                        else if (msg.body.type === 'file') {\n                            return <FileMessage message={msg} key={msg.id} />\n                        }\n                        else if (msg.body.type === 'img') {\n                            return <ImgMessage message={msg} key={msg.id} />\n                        }\n                        else if (msg.body.type === 'audio') {\n                            <AudioMessage message={msg} key={msg.id} />\n                        }\n                        else if (msg.body.type === 'recall') {\n                            return <RetractedMessage message={msg} key={msg.id} />\n                        } else {\n                            return null\n                        }\n                    })}\n                </ul>\n            </div>\n        </div>\n    );\n}\n\nexport default memo(MessageList)\n\n","/Users/lr/Documents/work/webim4.0/webim4.0/src/components/chat/sendBox.jsx",["297"],"import React, { memo, useCallback, useEffect, useRef, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Box, IconButton } from '@material-ui/core';\nimport sender from '@/assets/images/sender@2x.png';\nimport Emoji from './toolbars/emoji'\nimport { useSelector, useDispatch } from 'react-redux';\nimport MessageActions from '@/redux/message'\nimport { useParams } from \"react-router-dom\";\nimport WebIM from '@/common/WebIM'\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n        flexDirection: 'column',\n        height: theme.spacing(37.5),\n        width: '86%',\n        background: \"#fff\",\n        marginBottom: theme.spacing(12),\n        borderRadius: theme.spacing(2),\n        position: 'absolute',\n        bottom: 0\n    },\n    emitter: {\n        display: 'flex',\n        alignItems: 'flex-end',\n        padding: '0 16px'\n    },\n    input: {\n        outline: 'none',\n        flex: 1,\n        lineHeight: '17px',\n        fontSize: '14px',\n        border: 'none',\n        color: '#010101',\n        resize: 'none'\n    },\n    senderBar: {\n        height: theme.spacing(12),\n        width: theme.spacing(12),\n        cursor: 'pointer'\n    },\n    hide: {\n        display: 'none'\n    }\n}));\n\n\nfunction SendBox() {\n    const dispatch = useDispatch();\n    const classes = useStyles();\n    let { chatType, to } = useParams();\n    console.log('** Render SendBox **')\n    const emojiRef = useRef(null)\n    const fileEl = useRef(null)\n    const [emojiVisible, setEmojiVisible] = useState(null)\n    const [inputValue, setInputValue] = useState('')\n    const inputRef = useRef(null)\n    const inputValueRef = useRef(null)\n    const imageEl = useRef(null)\n    inputValueRef.current = inputValue\n    const handleClickEmoji = (e) => {\n        setEmojiVisible(e.currentTarget)\n    }\n    const handleEmojiClose = () => {\n        setEmojiVisible(null)\n    }\n    const handleEmojiSelected = (emoji) => {\n        setEmojiVisible(null)\n        setInputValue(value => value + emoji)\n        setTimeout(() => {\n            let el = inputRef.current\n            el.focus()\n            el.selectionStart = inputValueRef.current.length;\n            el.selectionEnd = inputValueRef.current.length;\n        }, 0)\n    }\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value)\n    }\n    const sendMessage = useCallback(() => {\n        if (!inputValue) return\n        dispatch(MessageActions.sendTxtMessage(to, chatType, {\n            msg: inputValue\n        }))\n        setInputValue('')\n        inputRef.current.focus()\n    }, [inputValue, to, chatType, dispatch])\n\n    const onKeyDownEvent = useCallback((e) => {\n        if (e.keyCode === 13 && e.shiftKey) {\n            e.preventDefault()\n            inputRef.current.value += \"\\n\";\n        }\n        else if (e.keyCode === 13) {\n            e.preventDefault()\n            sendMessage()\n        }\n    }, [sendMessage])\n\n    useEffect(() => {\n        inputRef.current.addEventListener('keydown', onKeyDownEvent)\n        return function cleanup() {\n            let _inputRef = inputRef\n            _inputRef && _inputRef?.current?.removeEventListener('keydown', onKeyDownEvent)\n        };\n    }, [onKeyDownEvent])\n\n    const handleFileClick = () => {\n        fileEl.current.focus()\n        fileEl.current.click()\n    }\n    const handleImageClick = () => {\n        imageEl.current.focus()\n        imageEl.current.click()\n    }\n    const handleFileChange = (e) => {\n        let file = WebIM.utils.getFileUrl(e.target)\n        console.log(file)\n        if (!file.filename) {\n            return false\n        }\n        dispatch(MessageActions.sendFileMessage(to, chatType, file))\n    }\n    const handleImageChange = (e) => {\n        let file = WebIM.utils.getFileUrl(e.target)\n        console.log(file)\n        if (!file.filename) {\n            return false\n        }\n    }\n    return (\n        <Box className={classes.root}>\n            <Box className={classes.toolbar}>\n                <IconButton ref={emojiRef} className=\"iconfont icon-biaoqing icon\" onClick={handleClickEmoji}></IconButton>\n\n                <IconButton className=\"iconfont icon-luyin icon\"></IconButton>\n                <IconButton className=\"iconfont icon-tupian icon\"\n                    onClick={handleImageClick}\n                >\n                    <input\n                        type=\"file\"\n                        accept=\"image/gif,image/jpeg,image/jpg,image/png,image/svg\"\n                        ref={imageEl}\n                        onChange={handleImageChange}\n                        className={classes.hide}\n                    />\n                </IconButton>\n                <IconButton className=\"iconfont icon-wenjianfujian icon\"\n                    onClick={handleFileClick}\n                >\n                    <input\n                        ref={fileEl}\n                        onChange={handleFileChange}\n                        type=\"file\"\n                        className={classes.hide}\n                    />\n                </IconButton>\n\n            </Box>\n            <Box className={classes.emitter}>\n                <textarea className={classes.input}\n                    rows=\"4\"\n                    value={inputValue}\n                    onChange={handleInputChange}\n                    ref={inputRef}\n                ></textarea>\n                <IconButton onClick={sendMessage}>\n                    <img src={sender} alt=\"send\" className={classes.senderBar} />\n                </IconButton>\n            </Box>\n\n            <Emoji anchorEl={emojiVisible}\n                onSelected={handleEmojiSelected}\n                onClose={handleEmojiClose}></Emoji>\n        </Box>\n    )\n}\nexport default memo(SendBox)","/Users/lr/Documents/work/webim4.0/webim4.0/src/components/chat/messages/imageMessage.js",[],"/Users/lr/Documents/work/webim4.0/webim4.0/src/components/chat/messages/textMessage.js",["298"],"import React, { memo, useState } from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport i18next from \"i18next\";\nimport { Menu, MenuItem } from '@material-ui/core';\nimport Avatar from '@material-ui/core/Avatar';\nimport { emoji } from '@/common/emoji'\nimport { renderTime } from '@/utils'\nconst useStyles = makeStyles((theme) => ({\n    pulldownListItem: {\n        display: 'flex',\n        padding: '10px 0',\n        listStyle: 'none',\n        marginBottom: '26px',\n        position: 'relative',\n        flexDirection: props =>\n            props.bySelf ? 'row-reverse' : 'row',\n    },\n    textBody: {\n        display: 'flex',\n        margin: props => props.bySelf ? '0 10px 26px 0' : '0 0 26px 10px',\n        lineHeight: '20px',\n        fontSize: '14px',\n        background: props => props.bySelf ? '#23C381' : '#FFFFFF',\n        color: props => props.bySelf ? '#fff' : '#000',\n        border: '1px solid #fff',\n        borderRadius: props => props.bySelf ? '4px 0 4px 4px' : '0px 4px 4px 4px',\n        padding: '15px',\n        maxWidth: '65%',\n        overflowWrap: 'break-word'\n    },\n    time: {\n        position: 'absolute',\n        fontSize: '11px',\n        height: '16px',\n        color: 'rgba(1, 1, 1, .2)',\n        lineHeight: '16px',\n        textAlign: 'center',\n        top: '-18px',\n        width: '100%'\n    },\n}))\nconst initialState = {\n    mouseX: null,\n    mouseY: null,\n};\nfunction TextMessage({ message, onRecallMessage }) {\n    const classes = useStyles({ bySelf: message.bySelf });\n    const [state, setState] = useState(initialState);\n    const handleClick = (event) => {\n        event.preventDefault();\n        setState({\n            mouseX: event.clientX - 2,\n            mouseY: event.clientY - 4,\n        });\n    };\n    const handleClose = () => {\n        setState(initialState);\n    };\n    const recallMessage = () => {\n        onRecallMessage(message)\n        handleClose()\n    }\n    const renderTxt = txt => {\n        if (txt === undefined) { return [] }\n        let rnTxt = []\n        let match = null\n        const regex = /(\\[.*?\\])/g\n        let start = 0\n        let index = 0\n        while ((match = regex.exec(txt))) {\n            index = match.index\n            if (index > start) {\n                rnTxt.push(txt.substring(start, index))\n            }\n            if (match[1] in emoji.map) {\n                const v = emoji.map[match[1]]\n                rnTxt.push(\n                    <img\n                        key={v}\n                        src={require(`../../../assets/faces/${v}`).default}\n                        width={20}\n                        height={20}\n                    />\n                )\n            } else {\n                rnTxt.push(match[1])\n            }\n            start = index + match[1].length\n        }\n        rnTxt.push(txt.substring(start, txt.length))\n\n        return rnTxt\n    }\n    return (\n        <li className={classes.pulldownListItem}>\n            <Avatar></Avatar>\n            <div className={classes.textBody} onContextMenu={handleClick}>\n                {renderTxt(message.body.msg)}\n            </div>\n            <div className={classes.time}>\n                {renderTime(message.time)}\n            </div>\n            {message.bySelf ?\n                <Menu\n                    keepMounted\n                    open={state.mouseY !== null}\n                    onClose={handleClose}\n                    anchorReference=\"anchorPosition\"\n                    anchorPosition={\n                        state.mouseY !== null && state.mouseX !== null\n                            ? { top: state.mouseY, left: state.mouseX }\n                            : undefined\n                    }\n                >\n                    <MenuItem onClick={recallMessage}>{i18next.t(\"withdraw\")}</MenuItem>\n                </Menu> : null\n            }\n\n        </li>\n    )\n}\n\nexport default memo(TextMessage)\n\n","/Users/lr/Documents/work/webim4.0/webim4.0/src/components/chat/messages/fileMessage.js",[],"/Users/lr/Documents/work/webim4.0/webim4.0/src/components/chat/messages/audioMessage.js",["299"],"import React, { memo, useRef } from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Avatar from '@material-ui/core/Avatar';\nimport agora from '@/assets/images/agora@2x.png'\nconst useStyles = makeStyles((theme) => ({\n    pulldownListItem: {\n        padding: '10px 0',\n        listStyle: 'none',\n        marginBottom: '26px',\n        position: 'relative',\n        display: 'flex'\n    },\n    audioBox: {\n        marginLeft: '10px',\n        maxWidth: '50%',\n        width: '208px',\n        height: '34px',\n        background: 'rgb(35, 195, 129)',\n        borderRadius: '4px 4px 4px 0px'\n    },\n    time: {\n        position: 'absolute',\n        fontSize: '11px',\n        height: '16px',\n        color: 'rgba(1, 1, 1, .2)',\n        lineHeight: '16px',\n        textAlign: 'center',\n        top: '-18px',\n        width: '100%'\n    }\n}))\n\nfunction AudioMessage({ url }) {\n    const classes = useStyles({ bySelf: true });\n    const audioRef = useRef(null)\n\n    const play = () => {\n        audioRef.current.play()\n    }\n    return (\n        <li className={classes.pulldownListItem}>\n            <Avatar>ss</Avatar>\n            <div className={classes.audioBox} onClick={play}>\n                <audio src={url} ref={audioRef} />\n            </div>\n            <div className={classes.time}>\n                2020/12/21 12:54 Mon\n            </div>\n        </li>\n    )\n}\n\nexport default memo(AudioMessage)","/Users/lr/Documents/work/webim4.0/webim4.0/src/components/chat/messages/retractedMessage.js",[],"/Users/lr/Documents/work/webim4.0/webim4.0/src/components/chat/toolbars/emoji.js",["300","301","302","303","304"],"import React, { memo, useEffect, lazy } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { emoji } from '@/common/emoji'\nimport { Menu, MenuItem, IconButton, Button } from '@material-ui/core';\nimport Popover from '@material-ui/core/Popover';\n\nconst useStyles = makeStyles((theme) => {\n    return {\n        emojiBox: {\n            width: props => props.width + 'px',\n            height: props => props.height + 'px',\n            display: 'flex',\n            flexWrap: 'wrap'\n        }\n    }\n});\nconst lineNum = 10;\nconst emojiWidth = 25;\nconst emojiPadding = 5;\nfunction Emoji({ anchorEl, onClose, onSelected }) {\n\n    const emojisNum = Object.values(emoji.map).length\n    const rows = Math.ceil(emojisNum / lineNum)\n    const width = (emojiWidth + 2 * emojiPadding) * lineNum\n    const height = (emojiWidth + 2 * emojiPadding) * rows\n    const classes = useStyles({ width, height });\n    function renderEmoji() {\n        return Object.keys(emoji.map).map((k) => {\n            const v = emoji.map[k]\n            return (\n                <Button\n                    style={{ width: '35px', height: '35px', minHeight: '0', minWidth: '0' }}\n                    key={k}\n                >\n                    <div\n                        style={{\n                            width: emojiWidth,\n                            height: emojiWidth,\n                            padding: emojiPadding\n                        }}\n                    >\n                        <img\n                            src={require(`../../../assets/faces/${v}`).default}\n                            alt={k}\n                            width={emojiWidth}\n                            height={emojiWidth}\n                        />\n                    </div>\n                </Button>\n            )\n        })\n    }\n\n    const handleEmojiClick = (e) => {\n        const emoji = e.target.alt\n        onSelected(emoji)\n    }\n    return (\n        <Popover\n            keepMounted\n            open={Boolean(anchorEl)}\n            onClose={onClose}\n            anchorEl={anchorEl}\n            style={{ maxHeight: '500px' }}\n            anchorOrigin={{\n                vertical: 'top',\n                horizontal: 'left',\n            }}\n            transformOrigin={{\n                vertical: 'bottom',\n                horizontal: 'left',\n            }}\n        >\n            <div className={classes.emojiBox} onClick={handleEmojiClick}>\n                {renderEmoji()}\n            </div>\n        </Popover>\n    );\n}\nexport default memo(Emoji)\n","/Users/lr/Documents/work/webim4.0/webim4.0/src/common/emoji.js",[],"/Users/lr/Documents/work/webim4.0/webim4.0/src/components/appbar/userInfo/index.jsx",["305","306"],"/Users/lr/Documents/work/webim4.0/webim4.0/src/components/appbar/userSetting/index.jsx",["307","308","309","310","311"],{"ruleId":"312","severity":1,"message":"313","line":7,"column":10,"nodeType":"314","messageId":"315","endLine":7,"endColumn":23},{"ruleId":"316","replacedBy":"317"},{"ruleId":"318","replacedBy":"319"},{"ruleId":"312","severity":1,"message":"320","line":29,"column":7,"nodeType":"314","messageId":"315","endLine":29,"endColumn":23},{"ruleId":"312","severity":1,"message":"321","line":3,"column":8,"nodeType":"314","messageId":"315","endLine":3,"endColumn":14},{"ruleId":"312","severity":1,"message":"322","line":3,"column":8,"nodeType":"314","messageId":"315","endLine":3,"endColumn":9},{"ruleId":"323","severity":1,"message":"324","line":45,"column":27,"nodeType":"325","messageId":"326","endLine":45,"endColumn":29},{"ruleId":"312","severity":1,"message":"322","line":3,"column":8,"nodeType":"314","messageId":"315","endLine":3,"endColumn":9},{"ruleId":"312","severity":1,"message":"327","line":4,"column":8,"nodeType":"314","messageId":"315","endLine":4,"endColumn":13},{"ruleId":"312","severity":1,"message":"328","line":5,"column":8,"nodeType":"314","messageId":"315","endLine":5,"endColumn":21},{"ruleId":"312","severity":1,"message":"322","line":3,"column":8,"nodeType":"314","messageId":"315","endLine":3,"endColumn":9},{"ruleId":"312","severity":1,"message":"322","line":3,"column":8,"nodeType":"314","messageId":"315","endLine":3,"endColumn":9},{"ruleId":"312","severity":1,"message":"329","line":5,"column":8,"nodeType":"314","messageId":"315","endLine":5,"endColumn":20},{"ruleId":"312","severity":1,"message":"328","line":6,"column":8,"nodeType":"314","messageId":"315","endLine":6,"endColumn":21},{"ruleId":"312","severity":1,"message":"330","line":58,"column":17,"nodeType":"314","messageId":"315","endLine":58,"endColumn":25},{"ruleId":"312","severity":1,"message":"331","line":60,"column":21,"nodeType":"314","messageId":"315","endLine":60,"endColumn":25},{"ruleId":"312","severity":1,"message":"332","line":62,"column":19,"nodeType":"314","messageId":"315","endLine":62,"endColumn":23},{"ruleId":"312","severity":1,"message":"333","line":8,"column":9,"nodeType":"314","messageId":"315","endLine":8,"endColumn":14},{"ruleId":"312","severity":1,"message":"334","line":165,"column":18,"nodeType":"314","messageId":"315","endLine":165,"endColumn":20},{"ruleId":"312","severity":1,"message":"335","line":169,"column":12,"nodeType":"314","messageId":"315","endLine":169,"endColumn":16},{"ruleId":"312","severity":1,"message":"336","line":1,"column":17,"nodeType":"314","messageId":"315","endLine":1,"endColumn":26},{"ruleId":"312","severity":1,"message":"337","line":2,"column":8,"nodeType":"314","messageId":"315","endLine":2,"endColumn":11},{"ruleId":"338","severity":1,"message":"339","line":50,"column":8,"nodeType":"340","endLine":50,"endColumn":10,"suggestions":"341"},{"ruleId":"338","severity":1,"message":"342","line":88,"column":8,"nodeType":"340","endLine":88,"endColumn":21,"suggestions":"343"},{"ruleId":"312","severity":1,"message":"344","line":2,"column":10,"nodeType":"314","messageId":"315","endLine":2,"endColumn":24},{"ruleId":"312","severity":1,"message":"345","line":3,"column":8,"nodeType":"314","messageId":"315","endLine":3,"endColumn":16},{"ruleId":"312","severity":1,"message":"346","line":4,"column":10,"nodeType":"314","messageId":"315","endLine":4,"endColumn":15},{"ruleId":"312","severity":1,"message":"347","line":4,"column":17,"nodeType":"314","messageId":"315","endLine":4,"endColumn":23},{"ruleId":"312","severity":1,"message":"348","line":2,"column":10,"nodeType":"314","messageId":"315","endLine":2,"endColumn":21},{"ruleId":"312","severity":1,"message":"349","line":9,"column":8,"nodeType":"314","messageId":"315","endLine":9,"endColumn":17},{"ruleId":"312","severity":1,"message":"329","line":12,"column":8,"nodeType":"314","messageId":"315","endLine":12,"endColumn":20},{"ruleId":"312","severity":1,"message":"350","line":13,"column":10,"nodeType":"314","messageId":"315","endLine":13,"endColumn":17},{"ruleId":"312","severity":1,"message":"351","line":24,"column":8,"nodeType":"314","messageId":"315","endLine":24,"endColumn":12},{"ruleId":"312","severity":1,"message":"352","line":29,"column":11,"nodeType":"314","messageId":"315","endLine":29,"endColumn":19},{"ruleId":"312","severity":1,"message":"348","line":2,"column":10,"nodeType":"314","messageId":"315","endLine":2,"endColumn":21},{"ruleId":"312","severity":1,"message":"349","line":9,"column":8,"nodeType":"314","messageId":"315","endLine":9,"endColumn":17},{"ruleId":"312","severity":1,"message":"350","line":14,"column":10,"nodeType":"314","messageId":"315","endLine":14,"endColumn":17},{"ruleId":"312","severity":1,"message":"351","line":25,"column":8,"nodeType":"314","messageId":"315","endLine":25,"endColumn":12},{"ruleId":"312","severity":1,"message":"353","line":1,"column":17,"nodeType":"314","messageId":"315","endLine":1,"endColumn":26},{"ruleId":"312","severity":1,"message":"354","line":1,"column":28,"nodeType":"314","messageId":"315","endLine":1,"endColumn":35},{"ruleId":"312","severity":1,"message":"355","line":5,"column":8,"nodeType":"314","messageId":"315","endLine":5,"endColumn":20},{"ruleId":"312","severity":1,"message":"356","line":10,"column":23,"nodeType":"314","messageId":"315","endLine":10,"endColumn":34},{"ruleId":"312","severity":1,"message":"353","line":1,"column":17,"nodeType":"314","messageId":"315","endLine":1,"endColumn":26},{"ruleId":"312","severity":1,"message":"357","line":1,"column":28,"nodeType":"314","messageId":"315","endLine":1,"endColumn":34},{"ruleId":"312","severity":1,"message":"358","line":2,"column":8,"nodeType":"314","messageId":"315","endLine":2,"endColumn":14},{"ruleId":"312","severity":1,"message":"359","line":7,"column":8,"nodeType":"314","messageId":"315","endLine":7,"endColumn":16},{"ruleId":"312","severity":1,"message":"360","line":8,"column":8,"nodeType":"314","messageId":"315","endLine":8,"endColumn":18},{"ruleId":"312","severity":1,"message":"361","line":9,"column":8,"nodeType":"314","messageId":"315","endLine":9,"endColumn":16},{"ruleId":"312","severity":1,"message":"362","line":10,"column":8,"nodeType":"314","messageId":"315","endLine":10,"endColumn":12},{"ruleId":"312","severity":1,"message":"363","line":13,"column":16,"nodeType":"314","messageId":"315","endLine":13,"endColumn":28},{"ruleId":"312","severity":1,"message":"364","line":14,"column":21,"nodeType":"314","messageId":"315","endLine":14,"endColumn":30},{"ruleId":"312","severity":1,"message":"365","line":7,"column":23,"nodeType":"314","messageId":"315","endLine":7,"endColumn":31},{"ruleId":"312","severity":1,"message":"366","line":5,"column":15,"nodeType":"314","messageId":"315","endLine":5,"endColumn":24},{"ruleId":"312","severity":1,"message":"367","line":5,"column":26,"nodeType":"314","messageId":"315","endLine":5,"endColumn":32},{"ruleId":"312","severity":1,"message":"368","line":9,"column":8,"nodeType":"314","messageId":"315","endLine":9,"endColumn":21},{"ruleId":"312","severity":1,"message":"369","line":11,"column":10,"nodeType":"314","messageId":"315","endLine":11,"endColumn":17},{"ruleId":"312","severity":1,"message":"365","line":7,"column":23,"nodeType":"314","messageId":"315","endLine":7,"endColumn":31},{"ruleId":"312","severity":1,"message":"370","line":1,"column":17,"nodeType":"314","messageId":"315","endLine":1,"endColumn":25},{"ruleId":"312","severity":1,"message":"371","line":7,"column":8,"nodeType":"314","messageId":"315","endLine":7,"endColumn":25},{"ruleId":"312","severity":1,"message":"372","line":9,"column":8,"nodeType":"314","messageId":"315","endLine":9,"endColumn":24},{"ruleId":"312","severity":1,"message":"373","line":10,"column":8,"nodeType":"314","messageId":"315","endLine":10,"endColumn":24},{"ruleId":"312","severity":1,"message":"370","line":1,"column":17,"nodeType":"314","messageId":"315","endLine":1,"endColumn":25},{"ruleId":"312","severity":1,"message":"366","line":4,"column":15,"nodeType":"314","messageId":"315","endLine":4,"endColumn":24},{"ruleId":"312","severity":1,"message":"367","line":4,"column":26,"nodeType":"314","messageId":"315","endLine":4,"endColumn":32},{"ruleId":"312","severity":1,"message":"368","line":8,"column":8,"nodeType":"314","messageId":"315","endLine":8,"endColumn":21},{"ruleId":"312","severity":1,"message":"369","line":10,"column":10,"nodeType":"314","messageId":"315","endLine":10,"endColumn":17},{"ruleId":"312","severity":1,"message":"374","line":12,"column":8,"nodeType":"314","messageId":"315","endLine":12,"endColumn":20},{"ruleId":"312","severity":1,"message":"370","line":1,"column":17,"nodeType":"314","messageId":"315","endLine":1,"endColumn":25},{"ruleId":"312","severity":1,"message":"366","line":5,"column":15,"nodeType":"314","messageId":"315","endLine":5,"endColumn":24},{"ruleId":"312","severity":1,"message":"367","line":5,"column":26,"nodeType":"314","messageId":"315","endLine":5,"endColumn":32},{"ruleId":"312","severity":1,"message":"368","line":9,"column":8,"nodeType":"314","messageId":"315","endLine":9,"endColumn":21},{"ruleId":"312","severity":1,"message":"369","line":11,"column":10,"nodeType":"314","messageId":"315","endLine":11,"endColumn":17},{"ruleId":"312","severity":1,"message":"374","line":13,"column":8,"nodeType":"314","messageId":"315","endLine":13,"endColumn":20},{"ruleId":"312","severity":1,"message":"375","line":4,"column":10,"nodeType":"314","messageId":"315","endLine":4,"endColumn":23},{"ruleId":"312","severity":1,"message":"376","line":4,"column":25,"nodeType":"314","messageId":"315","endLine":4,"endColumn":33},{"ruleId":"312","severity":1,"message":"377","line":5,"column":8,"nodeType":"314","messageId":"315","endLine":5,"endColumn":17},{"ruleId":"312","severity":1,"message":"378","line":30,"column":7,"nodeType":"314","messageId":"315","endLine":30,"endColumn":15},{"ruleId":"312","severity":1,"message":"379","line":37,"column":28,"nodeType":"314","messageId":"315","endLine":37,"endColumn":45},{"ruleId":"312","severity":1,"message":"380","line":38,"column":27,"nodeType":"314","messageId":"315","endLine":38,"endColumn":43},{"ruleId":"381","severity":1,"message":"382","line":79,"column":44,"nodeType":"383","messageId":"384","endLine":79,"endColumn":46},{"ruleId":"312","severity":1,"message":"348","line":6,"column":10,"nodeType":"314","messageId":"315","endLine":6,"endColumn":21},{"ruleId":"385","severity":1,"message":"386","line":78,"column":21,"nodeType":"387","endLine":83,"endColumn":23},{"ruleId":"312","severity":1,"message":"388","line":4,"column":8,"nodeType":"314","messageId":"315","endLine":4,"endColumn":13},{"ruleId":"312","severity":1,"message":"353","line":1,"column":23,"nodeType":"314","messageId":"315","endLine":1,"endColumn":32},{"ruleId":"312","severity":1,"message":"389","line":1,"column":34,"nodeType":"314","messageId":"315","endLine":1,"endColumn":38},{"ruleId":"312","severity":1,"message":"390","line":4,"column":10,"nodeType":"314","messageId":"315","endLine":4,"endColumn":14},{"ruleId":"312","severity":1,"message":"391","line":4,"column":16,"nodeType":"314","messageId":"315","endLine":4,"endColumn":24},{"ruleId":"312","severity":1,"message":"392","line":4,"column":26,"nodeType":"314","messageId":"315","endLine":4,"endColumn":36},{"ruleId":"312","severity":1,"message":"365","line":7,"column":23,"nodeType":"314","messageId":"315","endLine":7,"endColumn":31},{"ruleId":"312","severity":1,"message":"352","line":48,"column":9,"nodeType":"314","messageId":"315","endLine":48,"endColumn":17},{"ruleId":"312","severity":1,"message":"365","line":7,"column":23,"nodeType":"314","messageId":"315","endLine":7,"endColumn":31},{"ruleId":"312","severity":1,"message":"352","line":28,"column":9,"nodeType":"314","messageId":"315","endLine":28,"endColumn":17},{"ruleId":"312","severity":1,"message":"393","line":29,"column":10,"nodeType":"314","messageId":"315","endLine":29,"endColumn":20},{"ruleId":"312","severity":1,"message":"394","line":29,"column":22,"nodeType":"314","messageId":"315","endLine":29,"endColumn":35},{"ruleId":"312","severity":1,"message":"395","line":30,"column":10,"nodeType":"314","messageId":"315","endLine":30,"endColumn":15},"no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","no-native-reassign",["396"],"no-negated-in-lhs",["397"],"'composeEnhancers' is assigned a value but never used.","'Cookie' is defined but never used.","'_' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'WebIM' is defined but never used.","'CommonActions' is defined but never used.","'LoginActions' is defined but never used.","'pMessage' is assigned a value but never used.","'body' is assigned a value but never used.","'type' is assigned a value but never used.","'docEl' is assigned a value but never used.","'id' is assigned a value but never used.","'name' is assigned a value but never used.","'Component' is defined but never used.","'Box' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'to'. Either include them or remove the dependency array.","ArrayExpression",["398"],"React Hook useCallback has missing dependencies: 'dispatch', 'props.history', and 'props.location.search'. Either include them or remove the dependency array.",["399"],"'createMuiTheme' is defined but never used.","'Checkbox' is defined but never used.","'green' is defined but never used.","'orange' is defined but never used.","'useSelector' is defined but never used.","'Container' is defined but never used.","'history' is defined but never used.","'clsx' is defined but never used.","'dispatch' is assigned a value but never used.","'useEffect' is defined but never used.","'useMemo' is defined but never used.","'ListItemText' is defined but never used.","'useDispatch' is defined but never used.","'useRef' is defined but never used.","'AppBar' is defined but never used.","'MenuIcon' is defined but never used.","'SearchIcon' is defined but never used.","'MoreIcon' is defined but never used.","'Grid' is defined but never used.","'ListItemIcon' is defined but never used.","'isWidthUp' is defined but never used.","'useStore' is defined but never used.","'TextField' is defined but never used.","'Button' is defined but never used.","'RosterActions' is defined but never used.","'message' is defined but never used.","'useState' is defined but never used.","'DialogContentText' is defined but never used.","'MuiDialogContent' is defined but never used.","'MuiDialogActions' is defined but never used.","'chatRoomIcon' is defined but never used.","'FixedSizeList' is defined but never used.","'areEqual' is defined but never used.","'AutoSizer' is defined but never used.","'itemData' is assigned a value but never used.","'setBeforePullDown' is assigned a value but never used.","'setIsPullingDown' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'agora' is defined but never used.","'lazy' is defined but never used.","'Menu' is defined but never used.","'MenuItem' is defined but never used.","'IconButton' is defined but never used.","'inputValue' is assigned a value but never used.","'setInputValue' is assigned a value but never used.","'error' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"400","fix":"401"},{"desc":"402","fix":"403"},"Update the dependencies array to be: [dispatch, to]",{"range":"404","text":"405"},"Update the dependencies array to be: [dispatch, props.history, props.location.search, props.width]",{"range":"406","text":"407"},[1670,1672],"[dispatch, to]",[2921,2934],"[dispatch, props.history, props.location.search, props.width]"]
